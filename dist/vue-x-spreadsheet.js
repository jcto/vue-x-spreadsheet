!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["vue-x-spreadsheet"]=t():e["vue-x-spreadsheet"]=t()}(self,(function(){return(()=>{var e={140:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var i=n(15),s=n.n(i),r=n(645),o=n.n(r),l=n(667),a=n.n(l),h=n(452),A=o()(s()),c=a()(h.Z);A.push([e.id,"body {\n  margin: 0;\n}\n.x-spreadsheet {\n  font-size: 13px;\n  line-height: normal;\n  user-select: none;\n  -moz-user-select: none;\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  box-sizing: content-box;\n  background: #fff;\n  -webkit-font-smoothing: antialiased;\n}\n.x-spreadsheet textarea {\n  font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n}\n.x-spreadsheet-sheet {\n  position: relative;\n  overflow: hidden;\n}\n.x-spreadsheet-table {\n  vertical-align: bottom;\n}\n.x-spreadsheet-tooltip {\n  font-family: inherit;\n  position: absolute;\n  padding: 5px 10px;\n  color: #fff;\n  border-radius: 1px;\n  background: #000000;\n  font-size: 12px;\n  z-index: 201;\n}\n.x-spreadsheet-tooltip:before {\n  pointer-events: none;\n  position: absolute;\n  left: calc(50% - 4px);\n  top: -4px;\n  content: \"\";\n  width: 8px;\n  height: 8px;\n  background: inherit;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg);\n  z-index: 1;\n  box-shadow: 1px 1px 3px -1px rgba(0, 0, 0, 0.3);\n}\n.x-spreadsheet-color-palette {\n  padding: 5px;\n}\n.x-spreadsheet-color-palette table {\n  margin: 0;\n  padding: 0;\n  border-collapse: separate;\n  border-spacing: 2;\n  background: #fff;\n}\n.x-spreadsheet-color-palette table td {\n  margin: 0;\n  cursor: pointer;\n  border: 1px solid transparent;\n}\n.x-spreadsheet-color-palette table td:hover {\n  border-color: #ddd;\n}\n.x-spreadsheet-color-palette table td .x-spreadsheet-color-palette-cell {\n  width: 16px;\n  height: 16px;\n}\n.x-spreadsheet-border-palette {\n  padding: 6px;\n}\n.x-spreadsheet-border-palette table {\n  margin: 0;\n  padding: 0;\n  border-collapse: separate;\n  border-spacing: 0;\n  background: #fff;\n  table-layout: fixed;\n}\n.x-spreadsheet-border-palette table td {\n  margin: 0;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left {\n  border-right: 1px solid #eee;\n  padding-right: 6px;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left .x-spreadsheet-border-palette-cell {\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  text-align: center;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left .x-spreadsheet-border-palette-cell .x-spreadsheet-icon-img {\n  opacity: 0.8;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left .x-spreadsheet-border-palette-cell:hover {\n  background-color: #eee;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-right {\n  padding-left: 6px;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-right .x-spreadsheet-toolbar-btn {\n  margin-top: 0;\n  margin-bottom: 3px;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-right .x-spreadsheet-line-type {\n  position: relative;\n  left: 0;\n  top: -3px;\n}\n.x-spreadsheet-dropdown {\n  position: relative;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-content {\n  position: absolute;\n  z-index: 200;\n  background: #fff;\n  box-shadow: 1px 2px 5px 2px rgba(51, 51, 51, 0.15);\n}\n.x-spreadsheet-dropdown.bottom-left .x-spreadsheet-dropdown-content {\n  top: calc(100% + 5px);\n  left: 0;\n}\n.x-spreadsheet-dropdown.bottom-right .x-spreadsheet-dropdown-content {\n  top: calc(100% + 5px);\n  right: 0;\n}\n.x-spreadsheet-dropdown.top-left .x-spreadsheet-dropdown-content {\n  bottom: calc(100% + 5px);\n  left: 0;\n}\n.x-spreadsheet-dropdown.top-right .x-spreadsheet-dropdown-content {\n  bottom: calc(100% + 5px);\n  right: 0;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-title {\n  padding: 0 5px;\n  display: inline-block;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-header .x-spreadsheet-icon.arrow-left {\n  margin-left: 4px;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-header .x-spreadsheet-icon.arrow-right {\n  width: 10px;\n  margin-right: 4px;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-header .x-spreadsheet-icon.arrow-right .arrow-down {\n  left: -130px;\n}\n/* resizer **/\n.x-spreadsheet-resizer {\n  position: absolute;\n  z-index: 11;\n}\n.x-spreadsheet-resizer .x-spreadsheet-resizer-hover {\n  background-color: rgba(75, 137, 255, 0.25);\n}\n.x-spreadsheet-resizer .x-spreadsheet-resizer-line {\n  position: absolute;\n}\n.x-spreadsheet-resizer.horizontal {\n  cursor: row-resize;\n}\n.x-spreadsheet-resizer.horizontal .x-spreadsheet-resizer-line {\n  border-bottom: 2px dashed #4b89ff;\n  left: 0;\n  bottom: 0;\n}\n.x-spreadsheet-resizer.vertical {\n  cursor: col-resize;\n}\n.x-spreadsheet-resizer.vertical .x-spreadsheet-resizer-line {\n  border-right: 2px dashed #4b89ff;\n  top: 0;\n  right: 0;\n}\n/* scrollbar */\n.x-spreadsheet-scrollbar {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  background-color: #f4f5f8;\n  opacity: 0.9;\n  z-index: 12;\n}\n.x-spreadsheet-scrollbar.horizontal {\n  right: 15px;\n  overflow-x: scroll;\n  overflow-y: hidden;\n}\n.x-spreadsheet-scrollbar.horizontal > div {\n  height: 1px;\n  background: #ddd;\n}\n.x-spreadsheet-scrollbar.vertical {\n  bottom: 15px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n.x-spreadsheet-scrollbar.vertical > div {\n  width: 1px;\n  background: #ddd;\n}\n/* @{css-prefix}-overlayer */\n.x-spreadsheet-overlayer {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 10;\n}\n.x-spreadsheet-overlayer .x-spreadsheet-overlayer-content {\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  width: 100%;\n  height: 100%;\n}\n.x-spreadsheet-editor,\n.x-spreadsheet-comments,\n.x-spreadsheet-selector {\n  box-sizing: content-box;\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n/* @{css-prefix}-selector */\n.x-spreadsheet-selector .hide-input {\n  position: absolute;\n  z-index: 0;\n}\n.x-spreadsheet-selector .hide-input input {\n  padding: 0;\n  width: 0;\n  border: none!important;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-area {\n  position: absolute;\n  border: 2px solid #4b89ff;\n  background: rgba(75, 137, 255, 0.1);\n  z-index: 5;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-clipboard,\n.x-spreadsheet-selector .x-spreadsheet-selector-autofill {\n  position: absolute;\n  background: transparent;\n  z-index: 100;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-clipboard {\n  border: 2px dashed #4b89ff;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-autofill {\n  border: 1px dashed rgba(0, 0, 0, 0.45);\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-corner {\n  pointer-events: auto;\n  position: absolute;\n  cursor: crosshair;\n  font-size: 0;\n  height: 5px;\n  width: 5px;\n  right: -5px;\n  bottom: -5px;\n  border: 2px solid #ffffff;\n  background: #4b89ff;\n}\n.x-spreadsheet-editor {\n  z-index: 20;\n}\n.x-spreadsheet-editor .x-spreadsheet-editor-area {\n  position: absolute;\n  text-align: left;\n  border: 2px solid #4b89ff;\n  line-height: 0;\n  z-index: 100;\n  pointer-events: auto;\n}\n.x-spreadsheet-editor .x-spreadsheet-editor-area textarea {\n  box-sizing: content-box;\n  border: none;\n  padding: 0 3px;\n  outline: none;\n  resize: none;\n  text-align: start;\n  overflow-y: hidden;\n  font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n  color: inherit;\n  white-space: normal;\n  word-wrap: break-word;\n  line-height: 22px;\n  margin: 0;\n}\n.x-spreadsheet-editor .x-spreadsheet-editor-area .textline {\n  overflow: hidden;\n  visibility: hidden;\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n.x-spreadsheet-comments {\n  z-index: 21;\n}\n.x-spreadsheet-comments .x-spreadsheet-comments-area {\n  position: absolute;\n  text-align: left;\n  line-height: 0;\n  z-index: 100;\n  pointer-events: auto;\n}\n.x-spreadsheet-comments .x-spreadsheet-comments-area .x-spreadsheet-comment {\n  font-family: inherit;\n  position: absolute;\n  padding: 5px 10px;\n  border-radius: 1px;\n  background: #d4be78;\n  font-size: 12px;\n  z-index: 201;\n  height: 100px;\n  width: 200px;\n}\n.x-spreadsheet-comments .x-spreadsheet-comments-area .x-spreadsheet-comment:before {\n  pointer-events: none;\n  position: absolute;\n  left: calc(50% - 4px);\n  top: -4px;\n  content: \"\";\n  width: 8px;\n  height: 8px;\n  background: inherit;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg);\n  z-index: 1;\n  box-shadow: 1px 1px 3px -1px rgba(0, 0, 0, 0.3);\n}\n.x-spreadsheet-comments .x-spreadsheet-comments-area .x-spreadsheet-comment textarea {\n  background: inherit;\n  display: block;\n  height: 100%;\n  width: 100%;\n  box-sizing: content-box;\n  border: none;\n  padding: 0 3px;\n  outline: none;\n  resize: none;\n  text-align: start;\n  overflow-y: hidden;\n  font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n  color: inherit;\n  white-space: normal;\n  word-wrap: break-word;\n  line-height: 22px;\n  margin: 0;\n}\n.x-spreadsheet-item {\n  user-select: none;\n  background: 0;\n  border: 1px solid transparent;\n  outline: none;\n  height: 26px;\n  color: rgba(0, 0, 0, 0.9);\n  line-height: 26px;\n  list-style: none;\n  padding: 2px 10px;\n  cursor: default;\n  text-align: left;\n  overflow: hidden;\n}\n.x-spreadsheet-item.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.x-spreadsheet-item:hover,\n.x-spreadsheet-item.active {\n  background: rgba(0, 0, 0, 0.05);\n}\n.x-spreadsheet-item.divider {\n  height: 0;\n  padding: 0;\n  margin: 5px 0;\n  border: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n.x-spreadsheet-item .label {\n  float: right;\n  opacity: 0.65;\n  font-size: 1em;\n}\n.x-spreadsheet-item.state,\n.x-spreadsheet-header.state {\n  padding-left: 35px!important;\n  position: relative;\n}\n.x-spreadsheet-item.state:before,\n.x-spreadsheet-header.state:before {\n  content: '';\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  left: 12px;\n  top: calc(50% - 5px);\n  background: rgba(0, 0, 0, 0.08);\n  border-radius: 2px;\n}\n.x-spreadsheet-item.state.checked:before,\n.x-spreadsheet-header.state.checked:before {\n  background: #4b89ff;\n}\n.x-spreadsheet-checkbox {\n  position: relative;\n  display: inline-block;\n  backface-visibility: hidden;\n  outline: 0;\n  vertical-align: baseline;\n  font-style: normal;\n  font-size: 1rem;\n  line-height: 1em;\n}\n.x-spreadsheet-checkbox > input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0!important;\n  outline: 0;\n  z-index: -1;\n}\n.x-spreadsheet-suggest,\n.x-spreadsheet-contextmenu,\n.x-spreadsheet-sort-filter {\n  position: absolute;\n  box-shadow: 1px 2px 5px 2px rgba(51, 51, 51, 0.15);\n  background: #fff;\n  z-index: 100;\n  width: 260px;\n  pointer-events: auto;\n  overflow: auto;\n}\n.x-spreadsheet-suggest {\n  width: 200px;\n}\n.x-spreadsheet-filter {\n  border: 1px solid #e9e9e9;\n  font-size: 12px;\n  margin: 10px;\n}\n.x-spreadsheet-filter .x-spreadsheet-header {\n  padding: 0.5em 0.75em;\n  background: #f8f8f9;\n  border-bottom: 1px solid #e9e9e9;\n  border-left: 1px solid transparent;\n}\n.x-spreadsheet-filter .x-spreadsheet-body {\n  height: 200px;\n  overflow-y: auto;\n}\n.x-spreadsheet-filter .x-spreadsheet-body .x-spreadsheet-item {\n  height: 20px;\n  line-height: 20px;\n}\n.x-spreadsheet-sort-filter .x-spreadsheet-buttons {\n  margin: 10px;\n}\n.x-spreadsheet-toolbar,\n.x-spreadsheet-bottombar {\n  height: 40px;\n  padding: 0 30px;\n  text-align: left;\n  background: #f5f6f7;\n  display: flex;\n}\n.x-spreadsheet-bottombar {\n  position: relative;\n  border-top: 1px solid #e0e2e4;\n}\n.x-spreadsheet-bottombar .x-spreadsheet-menu > li {\n  line-height: 40px;\n  height: 40px;\n  padding-top: 0;\n  padding-bottom: 0;\n  vertical-align: middle;\n  border-right: 1px solid #e8eaed;\n}\n.x-spreadsheet-menu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  user-select: none;\n}\n.x-spreadsheet-menu > li {\n  float: left;\n  line-height: 1.25em;\n  padding: 0.785em 1em;\n  margin: 0;\n  vertical-align: middle;\n  text-align: left;\n  font-weight: 400;\n  color: #80868b;\n  white-space: nowrap;\n  cursor: pointer;\n  transition: all 0.3s;\n  font-weight: bold;\n}\n.x-spreadsheet-menu > li.active {\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.65);\n}\n.x-spreadsheet-menu > li .x-spreadsheet-icon {\n  margin: 0 6px;\n}\n.x-spreadsheet-menu > li .x-spreadsheet-icon .x-spreadsheet-icon-img:hover {\n  opacity: 0.85;\n}\n.x-spreadsheet-menu > li .x-spreadsheet-dropdown {\n  display: inline-block;\n}\n.x-spreadsheet-toolbar {\n  border-bottom: 1px solid #e0e2e4;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btns {\n  display: inline-flex;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-more {\n  padding: 0 6px 6px;\n  text-align: left;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-more .x-spreadsheet-toolbar-divider {\n  margin-top: 0;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn {\n  flex: 0 0 auto;\n  display: inline-block;\n  border: 1px solid transparent;\n  height: 26px;\n  line-height: 26px;\n  min-width: 26px;\n  margin: 6px 1px 0;\n  padding: 0;\n  text-align: center;\n  border-radius: 2px;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn:hover,\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn.active {\n  background: rgba(0, 0, 0, 0.08);\n}\n.x-spreadsheet-toolbar-divider {\n  display: inline-block;\n  border-right: 1px solid #e0e2e4;\n  width: 0;\n  vertical-align: middle;\n  height: 18px;\n  margin: 12px 3px 0;\n}\n.x-spreadsheet-print {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 100;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.x-spreadsheet-print-bar {\n  background: #424242;\n  height: 60px;\n  line-height: 60px;\n  padding: 0 30px;\n}\n.x-spreadsheet-print-bar .-title {\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.2em;\n  float: left;\n}\n.x-spreadsheet-print-bar .-right {\n  float: right;\n  margin-top: 12px;\n}\n.x-spreadsheet-print-content {\n  display: flex;\n  flex: auto;\n  flex-direction: row;\n  background: #d0d0d0;\n  height: calc(100% - 60px);\n}\n.x-spreadsheet-print-content .-sider {\n  flex: 0 0 300px;\n  width: 300px;\n  border-left: 2px solid #ccc;\n  background: #fff;\n}\n.x-spreadsheet-print-content .-content {\n  flex: auto;\n  overflow-x: auto;\n  overflow-y: scroll;\n  height: 100%;\n}\n.x-spreadsheet-canvas-card-wraper {\n  margin: 40px 20px;\n}\n.x-spreadsheet-canvas-card {\n  background: #fff;\n  margin: auto;\n  page-break-before: auto;\n  page-break-after: always;\n  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 3px rgba(0, 0, 0, 0.12), 0 4px 5px 0 rgba(0, 0, 0, 0.2);\n}\n.x-spreadsheet-calendar {\n  color: rgba(0, 0, 0, 0.65);\n  background: #ffffff;\n  user-select: none;\n}\n.x-spreadsheet-calendar .calendar-header {\n  font-weight: 700;\n  line-height: 30px;\n  text-align: center;\n  width: 100%;\n  float: left;\n  background: #f9fafb;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-left {\n  padding-left: 5px;\n  float: left;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-right {\n  float: right;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-right a {\n  padding: 3px 0;\n  margin-right: 2px;\n  border-radius: 2px;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-right a:hover {\n  background: rgba(0, 0, 0, 0.08);\n}\n.x-spreadsheet-calendar .calendar-body {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n.x-spreadsheet-calendar .calendar-body th,\n.x-spreadsheet-calendar .calendar-body td {\n  width: 14.28571429%;\n  min-width: 32px;\n  text-align: center;\n  font-weight: 700;\n  line-height: 30px;\n  padding: 0;\n}\n.x-spreadsheet-calendar .calendar-body td > .cell:hover {\n  background: #ecf6fd;\n}\n.x-spreadsheet-calendar .calendar-body td > .cell.active,\n.x-spreadsheet-calendar .calendar-body td > .cell.active:hover {\n  background: #ecf6fd;\n  color: #2185D0;\n}\n.x-spreadsheet-calendar .calendar-body td > .cell.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.x-spreadsheet-datepicker {\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);\n  position: absolute;\n  left: 0;\n  top: calc(100% + 5px);\n  z-index: 10;\n  width: auto;\n}\n.x-spreadsheet-buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n.x-spreadsheet-buttons .x-spreadsheet-button {\n  margin-left: 8px;\n}\n.x-spreadsheet-button {\n  display: inline-block;\n  border-radius: 3px;\n  line-height: 1em;\n  min-height: 1em;\n  white-space: nowrap;\n  text-align: center;\n  cursor: pointer;\n  font-size: 1em;\n  font-weight: 700;\n  padding: 0.75em 1em;\n  color: rgba(0, 0, 0, 0.6);\n  background: #E0E1E2;\n  text-decoration: none;\n  font-family: \"Lato\", \"proxima-nova\", \"Helvetica Neue\", Arial, sans-serif;\n  outline: none;\n  vertical-align: baseline;\n  zoom: 1;\n  user-select: none;\n  transition: all 0.1s linear;\n}\n.x-spreadsheet-button.active,\n.x-spreadsheet-button:hover {\n  background-color: #C0C1C2;\n  color: rgba(0, 0, 0, 0.8);\n}\n.x-spreadsheet-button.primary {\n  color: #fff;\n  background-color: #2185D0;\n}\n.x-spreadsheet-button.primary:hover,\n.x-spreadsheet-button.primary.active {\n  color: #fff;\n  background-color: #1678c2;\n}\n.x-spreadsheet-form-input {\n  font-size: 1em;\n  position: relative;\n  font-weight: 400;\n  display: inline-flex;\n  color: rgba(0, 0, 0, 0.87);\n}\n.x-spreadsheet-form-input input {\n  z-index: 1;\n  margin: 0;\n  max-width: 100%;\n  flex: 1 0 auto;\n  outline: 0;\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\n  text-align: left;\n  line-height: 30px;\n  height: 30px;\n  padding: 0 8px;\n  background: #fff;\n  border: 1px solid #e9e9e9;\n  border-radius: 3px;\n  transition: box-shadow 0.1s ease, border-color 0.1s ease;\n  box-shadow: inset 0 1px 2px hsla(0, 0%, 4%, 0.06);\n}\n.x-spreadsheet-form-input input:focus {\n  border-color: #4b89ff;\n  box-shadow: inset 0 1px 2px rgba(75, 137, 255, 0.2);\n}\n.x-spreadsheet-form-select {\n  position: relative;\n  display: inline-block;\n  background: #fff;\n  border: 1px solid #e9e9e9;\n  border-radius: 2px;\n  cursor: pointer;\n  color: rgba(0, 0, 0, 0.87);\n  user-select: none;\n  box-shadow: inset 0 1px 2px hsla(0, 0%, 4%, 0.06);\n}\n.x-spreadsheet-form-select .input-text {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  min-width: 60px;\n  width: auto;\n  height: 30px;\n  line-height: 30px;\n  padding: 0 8px;\n}\n.x-spreadsheet-form-fields {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n.x-spreadsheet-form-fields .x-spreadsheet-form-field {\n  flex: 0 1 auto;\n}\n.x-spreadsheet-form-fields .x-spreadsheet-form-field .label {\n  display: inline-block;\n  margin: 0 10px 0 0;\n}\n.x-spreadsheet-form-field {\n  display: block;\n  vertical-align: middle;\n  margin-left: 10px;\n  margin-bottom: 10px;\n}\n.x-spreadsheet-form-field:first-child {\n  margin-left: 0;\n}\n.x-spreadsheet-form-field.error .x-spreadsheet-form-select,\n.x-spreadsheet-form-field.error input {\n  border-color: #f04134;\n}\n.x-spreadsheet-form-field .tip {\n  color: #f04134;\n  font-size: 0.9em;\n}\n.x-spreadsheet-dimmer {\n  display: none;\n  position: absolute;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  vertical-align: middle;\n  background-color: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-duration: 0.5s;\n  animation-duration: 0.5s;\n  transition: background-color 0.5s linear;\n  user-select: none;\n  z-index: 1000;\n}\n.x-spreadsheet-dimmer.active {\n  display: block;\n  opacity: 1;\n}\nform fieldset {\n  border: none;\n}\nform fieldset label {\n  display: block;\n  margin-bottom: 0.5em;\n  font-size: 1em;\n  color: #666;\n}\nform fieldset select {\n  font-size: 1.1em;\n  width: 100%;\n  background-color: #fff;\n  border: none;\n  border-bottom: 2px solid #ddd;\n  padding: 0.5em 0.85em;\n  border-radius: 2px;\n}\n.x-spreadsheet-modal,\n.x-spreadsheet-toast {\n  font-size: 13px;\n  position: fixed;\n  z-index: 1001;\n  text-align: left;\n  line-height: 1.25em;\n  min-width: 360px;\n  color: rgba(0, 0, 0, 0.87);\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  border-radius: 4px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  background-clip: padding-box;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 8px;\n}\n.x-spreadsheet-toast {\n  background-color: rgba(255, 255, 255, 0.85);\n}\n.x-spreadsheet-modal-header,\n.x-spreadsheet-toast-header {\n  font-weight: 600;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.85);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  border-radius: 4px 4px 0 0;\n}\n.x-spreadsheet-modal-header .x-spreadsheet-icon,\n.x-spreadsheet-toast-header .x-spreadsheet-icon {\n  position: absolute;\n  right: 0.8em;\n  top: 0.65em;\n  border-radius: 18px;\n}\n.x-spreadsheet-modal-header .x-spreadsheet-icon:hover,\n.x-spreadsheet-toast-header .x-spreadsheet-icon:hover {\n  opacity: 1;\n  background: rgba(0, 0, 0, 0.08);\n}\n.x-spreadsheet-toast-header {\n  color: #F2711C;\n}\n.x-spreadsheet-modal-header {\n  border-bottom: 1px solid #e0e2e4;\n  background: rgba(0, 0, 0, 0.08);\n  font-size: 1.0785em;\n}\n.x-spreadsheet-modal-header,\n.x-spreadsheet-modal-content,\n.x-spreadsheet-toast-header,\n.x-spreadsheet-toast-content {\n  padding: 0.75em 1em;\n}\n@media screen and (min-width: 320px) and (max-width: 480px) {\n  .x-spreadsheet-toolbar {\n    display: none;\n  }\n}\n.x-spreadsheet-icon {\n  width: 18px;\n  height: 18px;\n  margin: 1px 1px 2px 1px;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img {\n  background-image: url("+c+");\n  position: absolute;\n  width: 262px;\n  height: 444px;\n  opacity: 0.56;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.undo {\n  left: 0;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.redo {\n  left: -18px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.print {\n  left: -36px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.paintformat {\n  left: -54px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.clearformat {\n  left: -72px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.font-bold {\n  left: -90px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.font-italic {\n  left: -108px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.underline {\n  left: -126px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.strike {\n  left: -144px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.color {\n  left: -162px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.bgcolor {\n  left: -180px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.merge {\n  left: -198px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-left {\n  left: -216px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-center {\n  left: -234px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-right {\n  left: 0;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-top {\n  left: -18px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-middle {\n  left: -36px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-bottom {\n  left: -54px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.textwrap {\n  left: -72px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.autofilter {\n  left: -90px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.formula {\n  left: -108px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.arrow-down {\n  left: -126px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.arrow-right {\n  left: -144px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.link {\n  left: -162px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chart {\n  left: -180px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.freeze {\n  left: -198px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.ellipsis {\n  left: -216px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.add {\n  left: -234px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-all {\n  left: 0;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-inside {\n  left: -18px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-horizontal {\n  left: -36px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-vertical {\n  left: -54px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-outside {\n  left: -72px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-left {\n  left: -90px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-top {\n  left: -108px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-right {\n  left: -126px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-bottom {\n  left: -144px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-none {\n  left: -162px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.line-color {\n  left: -180px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.line-type {\n  left: -198px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.close {\n  left: -234px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-down {\n  left: 0;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-up {\n  left: -18px;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-left {\n  left: -36px;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-right {\n  left: -54px;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.comment {\n  left: -180px;\n  top: -36px;\n}\n","",{version:3,sources:["webpack://src/xspreadsheet/index.less"],names:[],mappings:"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AAA;AA5MN;AA8MI;EACE,WAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,YAAA;EACA,MAAA;AA5MN;AA8MI;EACE,OAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,OAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN;AA8MI;EACE,OAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,WAAA;EACA,UAAA;AA5MN;AA8MI;EACE,YAAA;EACA,UAAA;AA5MN",sourcesContent:["@css-prefix: x-spreadsheet;\n// color\n@red-color: #DB2828;\n@red-hover-color: #d01919;\n@orange-color: #F2711C;\n@orange-hover-color: #f26202;\n@yellow-color: #FBBD08;\n@yellow-hover-color: #eaae00;\n@olive-color: #B5CC18;\n@olive-hover-color: #a7bd0d;\n@green-color: #21BA45;\n@green-hover-color: #16ab39;\n@teal-color: #00B5AD;\n@teal-hover-color: #009c95;\n@blue-color: #2185D0;\n@blue-hover-color: #1678c2;\n@violet-color: #6435C9;\n@violet-hover-color: #5829bb;\n@purple-color: #A333C8;\n@purple-hover-color: #9627ba;\n@pink-color: #E03997;\n@pink-hover-color: #e61a8d;\n@brown-color: #A5673F;\n@brown-hover-color: #975b33;\n@grey-color: #767676;\n@grey-hover-color: #838383;\n@dark-color: #343a40;\n@dark-hover-color: darken(@dark-color, 10%);\n@black-color: #1B1C1D;\n@black-hover-color: #27292a;\n\n// base\n@border-style: 1px solid #e0e2e4;\n@icon-size: 18px;\n@line-height: 1.25em;\n@border-color: #e9e9e9;\n@border: 1px solid @border-color;\n@input-border: @border;\n@input-padding: 0.5em 0.75em;\n@input-box-shadow: inset 0 1px 2px hsla(0,0%,4%,.06);\n@border-radius: 2px;\n@form-field-height: 30px;\n@primary-color: @blue-color;\n@primary-hover-color: @blue-hover-color;\n\n// method\n.type-primary() {\n  color: #fff;\n  background-color: @primary-color;\n  &:hover, &.active {\n    color: #fff;\n    background-color: @primary-hover-color;\n  }\n}\n\nbody {\n  margin: 0;\n}\n\n.@{css-prefix} {\n  font-size: 13px;\n  line-height: normal;\n  user-select: none;\n  -moz-user-select: none;\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  box-sizing: content-box;\n  background: #fff;\n  -webkit-font-smoothing: antialiased;\n\n  textarea {\n    font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n  }\n}\n\n.@{css-prefix}-sheet {\n  position: relative;\n  overflow: hidden;\n}\n\n.@{css-prefix}-table {\n  // html5 bottom margin bug\n  vertical-align: bottom;\n}\n\n.@{css-prefix}-tooltip {\n  font-family: inherit;\n  position: absolute;\n  padding: 5px 10px;\n  color: #fff;\n  border-radius: 1px;\n  background: rgba(0, 0, 0, 1);\n  font-size: 12px;\n  z-index: 201;\n\n  &:before {\n    pointer-events: none;\n    position: absolute;\n    left: calc(50% - 4px);\n    top: -4px;\n    content: \"\";\n    width: 8px;\n    height: 8px;\n    background: inherit;\n    -webkit-transform: rotate(45deg);\n    transform: rotate(45deg);\n    z-index: 1;\n    box-shadow: 1px 1px 3px -1px rgba(0, 0, 0, .3);\n  }\n}\n\n.@{css-prefix}-color-palette {\n  padding: 5px;\n\n  table {\n    margin: 0;\n    padding: 0;\n    border-collapse: separate;\n    border-spacing: 2;\n    background: #fff;\n\n    td {\n      margin: 0;\n      cursor: pointer;\n      border: 1px solid transparent;\n\n      &:hover {\n        border-color: #ddd;\n      }\n\n      .@{css-prefix}-color-palette-cell {\n        width: 16px;\n        height: 16px;\n      }\n    }\n  }\n}\n\n.@{css-prefix}-border-palette {\n  padding: 6px;\n\n  table {\n    margin: 0;\n    padding: 0;\n    border-collapse: separate;\n    border-spacing: 0;\n    background: #fff;\n    table-layout: fixed;\n\n    td {\n      margin: 0;\n    }\n  }\n\n  .@{css-prefix}-border-palette-left {\n    border-right: 1px solid #eee;\n    padding-right: 6px;\n\n    .@{css-prefix}-border-palette-cell {\n      width: 30px;\n      height: 30px;\n      cursor: pointer;\n      text-align: center;\n\n      .@{css-prefix}-icon-img {\n        opacity: .8;\n      }\n\n      &:hover {\n        background-color: #eee;\n      }\n    }\n  }\n\n  .@{css-prefix}-border-palette-right {\n    padding-left: 6px;\n\n    .@{css-prefix}-toolbar-btn {\n      margin-top: 0;\n      margin-bottom: 3px;\n    }\n\n    .@{css-prefix}-line-type {\n      position: relative;\n      left: 0;\n      top: -3px;\n    }\n\n  }\n\n}\n\n.@{css-prefix}-dropdown {\n  position: relative;\n\n  .@{css-prefix}-dropdown-content {\n    position: absolute;\n    z-index: 200;\n    background: #fff;\n    box-shadow: 1px 2px 5px 2px rgba(51,51,51,.15);\n  }\n\n  &.bottom-left {\n    .@{css-prefix}-dropdown-content {\n      top: calc(~'100% + 5px');\n      left: 0;\n    }\n  }\n\n  &.bottom-right {\n    .@{css-prefix}-dropdown-content {\n      top: calc(~'100% + 5px');\n      right: 0;\n    }\n  }\n\n  &.top-left {\n    .@{css-prefix}-dropdown-content {\n      bottom: calc(~'100% + 5px');\n      left: 0;\n    }\n  }\n\n  &.top-right {\n    .@{css-prefix}-dropdown-content {\n      bottom: calc(~'100% + 5px');\n      right: 0;\n    }\n  }\n\n\n  .@{css-prefix}-dropdown-title {\n    padding: 0 5px;\n    display: inline-block;\n  }\n\n  .@{css-prefix}-dropdown-header {\n    .@{css-prefix}-icon.arrow-left {\n      margin-left: 4px;\n    }\n    .@{css-prefix}-icon.arrow-right {\n      width: 10px;\n      margin-right: 4px;\n      .arrow-down {\n        left: -130px;\n      }\n    }\n  }\n}\n/* resizer **/\n.@{css-prefix}-resizer {\n  position: absolute;\n  z-index: 11;\n\n  .@{css-prefix}-resizer-hover {\n    background-color: rgba(75, 137, 255, .25);\n  }\n  .@{css-prefix}-resizer-line {\n    position: absolute;\n  }\n\n  &.horizontal {\n    cursor: row-resize;\n    .@{css-prefix}-resizer-line {\n      border-bottom: 2px dashed rgb(75, 137, 255);\n      left: 0;\n      bottom: 0;\n    }\n  }\n  &.vertical {\n    cursor: col-resize;\n    .@{css-prefix}-resizer-line {\n      border-right: 2px dashed rgb(75, 137, 255);\n      top: 0;\n      right: 0;\n    }\n  }\n}\n/* scrollbar */\n.@{css-prefix}-scrollbar {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  background-color: #f4f5f8;\n  opacity: 0.9;\n  z-index: 12;\n  &.horizontal {\n    right: 15px;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    > div {\n      height: 1px;\n      background: #ddd;\n    }\n  }\n  &.vertical {\n    bottom: 15px;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    > div {\n      width: 1px;\n      background: #ddd;\n    }\n  }\n  &:hover {\n    // opacity: .85;\n  }\n}\n\n/* @{css-prefix}-overlayer */\n.@{css-prefix}-overlayer {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 10;\n  .@{css-prefix}-overlayer-content {\n    position: absolute;\n    overflow: hidden;\n    pointer-events: none;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.@{css-prefix}-editor,.@{css-prefix}-comments, .@{css-prefix}-selector {\n  box-sizing: content-box;\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n/* @{css-prefix}-selector */\n.@{css-prefix}-selector {\n  .hide-input {\n    position: absolute;\n    z-index: 0;\n    input {\n      padding: 0;\n      width: 0;\n      border: none!important;\n    }\n  }\n  .@{css-prefix}-selector-area {\n    position: absolute;\n    border: 2px solid rgb(75, 137, 255);\n    background: rgba(75, 137, 255, .1);\n    z-index: 5;\n  }\n  .@{css-prefix}-selector-clipboard, .@{css-prefix}-selector-autofill {\n    position: absolute;\n    background: transparent;\n    z-index: 100;\n  }\n  .@{css-prefix}-selector-clipboard {\n    border: 2px dashed rgb(75, 137, 255);\n  }\n  .@{css-prefix}-selector-autofill {\n    border: 1px dashed rgba(0, 0, 0, .45); // #606060; // rgba(0, 0, 0, .2);\n  }\n  .@{css-prefix}-selector-corner {\n    pointer-events: auto;\n    position: absolute;\n    cursor: crosshair;\n    font-size: 0;\n    height: 5px;\n    width: 5px;\n    right: -5px;\n    bottom: -5px;\n    border: 2px solid rgb(255, 255, 255);\n    background: rgb(75, 137, 255);\n  }\n}\n.@{css-prefix}-editor {\n  z-index: 20;\n  .@{css-prefix}-editor-area {\n    position: absolute;\n    text-align: left;\n    border: 2px solid rgb(75, 137, 255);\n    line-height: 0;\n    z-index: 100;\n    pointer-events: auto;\n\n    textarea {\n      box-sizing: content-box;\n      border: none;\n      padding: 0 3px;\n      outline: none;\n      resize: none;\n      text-align: start;\n      overflow-y: hidden;\n      font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n      color: inherit;\n      white-space: normal;\n      word-wrap: break-word;\n      line-height: 22px;\n      margin: 0;\n    }\n\n    .textline {\n      overflow: hidden;\n      visibility: hidden;\n      position: fixed;\n      top: 0;\n      left: 0;\n    }\n  }\n}\n\n.@{css-prefix}-comments {\n  z-index: 21;\n  .@{css-prefix}-comments-area {\n    position: absolute;\n    text-align: left;\n    // border: 2px solid rgb(75, 137, 255);\n    line-height: 0;\n    z-index: 100;\n    pointer-events: auto;\n    .@{css-prefix}-comment {\n      font-family: inherit;\n      position: absolute;\n      padding: 5px 10px;\n      border-radius: 1px;\n      background: rgb(212, 190, 120);\n      font-size: 12px;\n      z-index: 201;\n      height: 100px;\n      width: 200px;\n    \n      &:before {\n        pointer-events: none;\n        position: absolute;\n        left: calc(50% - 4px);\n        top: -4px;\n        content: \"\";\n        width: 8px;\n        height: 8px;\n        background: inherit;\n        -webkit-transform: rotate(45deg);\n        transform: rotate(45deg);\n        z-index: 1;\n        box-shadow: 1px 1px 3px -1px rgba(0, 0, 0, .3);\n      }\n      textarea {\n        background: inherit;\n        display: block;\n        height: 100%;\n        width: 100%;\n        box-sizing: content-box;\n        border: none;\n        padding: 0 3px;\n        outline: none;\n        resize: none;\n        text-align: start;\n        overflow-y: hidden;\n        font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n        color: inherit;\n        white-space: normal;\n        word-wrap: break-word;\n        line-height: 22px;\n        margin: 0;\n      }\n    }\n\n  }\n}\n\n.@{css-prefix}-item {\n  user-select: none;\n  background: 0;\n  border: 1px solid transparent;\n  outline: none;\n  height: 26px;\n  color: rgba(0, 0, 0, .9);\n  line-height: 26px;\n  list-style: none;\n  padding: 2px 10px;\n  cursor: default;\n  text-align: left;\n  overflow: hidden;\n\n  &.disabled {\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n  &:hover, &.active {\n    background: rgba(0, 0, 0, .05);\n  }\n\n  // &.active {\n    ////   background: #89aef53d;\n  // }\n\n  &.divider {\n    height: 0;\n    padding: 0;\n    margin: 5px 0;\n    border: none;\n    border-bottom: 1px solid rgba(0, 0, 0, .1);\n  }\n\n  .label {\n    float: right;\n    opacity: .65;\n    font-size: 1em;\n  }\n}\n\n.x-spreadsheet-item,\n.x-spreadsheet-header {\n\n  &.state {\n    padding-left: 35px!important;\n    position: relative;\n\n    &:before {\n      content: '';\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      left: 12px;\n      top: calc(50% - 5px);\n      background: rgba(0, 0, 0, 0.08);\n      // border: 1px solid rgba(0, 0, 0, 0.1);\n      border-radius: 2px;\n    }\n  }\n  &.state.checked:before {\n    background: #4b89ff;\n    // content: '';\n    // position: absolute;\n    // width: 5px;\n    // height: 12px;\n    // color: #4b89ff; // #353A41;\n    // border-left: none;\n    // border-top: none;\n    // border-bottom: 2px solid;\n    // border-right: 2px solid;\n    // left: 15px;\n    // top: 6px;\n    // background: none;\n    // border-radius: 0;\n    // transform-origin: center;\n    // transform: rotate(45deg);\n    // -webkit-transform: rotate(45deg);\n  }\n\n}\n\n.@{css-prefix}-checkbox {\n  position: relative;\n  display: inline-block;\n  backface-visibility: hidden;\n  outline: 0;\n  vertical-align: baseline;\n  font-style: normal;\n  font-size: 1rem;\n  line-height: 1em;\n  > input {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0!important;\n    outline: 0;\n    z-index: -1;\n  }\n}\n\n.@{css-prefix}-suggest,\n.@{css-prefix}-contextmenu,\n.@{css-prefix}-sort-filter {\n  position: absolute;\n  box-shadow: 1px 2px 5px 2px rgba(51, 51, 51, 0.15);\n  background: #fff;\n  z-index: 100;\n  width: 260px;\n  pointer-events: auto;\n  overflow: auto;\n}\n\n.@{css-prefix}-suggest {\n  width: 200px;\n}\n\n.@{css-prefix}-filter {\n  border: 1px solid #e9e9e9;\n  font-size: 12px;\n  margin: 10px;\n\n  .@{css-prefix}-header {\n    padding: .5em .75em;\n    background: #f8f8f9;\n    border-bottom: 1px solid #e9e9e9;\n    border-left: 1px solid transparent;\n  }\n  .@{css-prefix}-body {\n    height: 200px;\n    overflow-y: auto;\n\n    .@{css-prefix}-item {\n      height: 20px;\n      line-height: 20px;\n    }\n  }\n}\n\n.@{css-prefix}-sort-filter {\n  .@{css-prefix}-buttons {\n    margin: 10px;\n  }\n}\n\n.@{css-prefix}-toolbar, .@{css-prefix}-bottombar {\n  height: 40px;\n  padding: 0 30px;\n  text-align: left;\n  background: #f5f6f7;\n  display: flex;\n}\n\n.@{css-prefix}-bottombar {\n  position: relative;\n  border-top: 1px solid #e0e2e4;\n\n  .@{css-prefix}-menu > li {\n    line-height: 40px;\n    height: 40px;\n    padding-top: 0;\n    padding-bottom: 0;\n    vertical-align: middle;\n    border-right: 1px solid #e8eaed;\n  }\n}\n\n.@{css-prefix}-menu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  user-select: none;\n}\n.@{css-prefix}-menu > li {\n  float: left;\n  line-height: 1.25em;\n  padding: .785em 1em;\n  margin: 0;\n  vertical-align: middle;\n  text-align: left;\n  font-weight: 400;\n  color: #80868b;\n  white-space: nowrap;\n  cursor: pointer;\n  transition: all .3s;\n  font-weight: bold;\n\n  &.active {\n    background-color: #fff;\n    color: rgba(0, 0, 0, .65);\n  }\n\n  .@{css-prefix}-icon {\n    margin: 0 6px;\n\n    .@{css-prefix}-icon-img {\n      &:hover {\n        opacity: .85;\n      }\n    }\n  }\n\n  .@{css-prefix}-dropdown {\n    display: inline-block;\n  }\n}\n\n.@{css-prefix}-toolbar {\n  border-bottom: 1px solid #e0e2e4;\n\n  .@{css-prefix}-toolbar-btns {\n    display: inline-flex;\n  }\n\n  .@{css-prefix}-toolbar-more {\n    padding: 0 6px 6px;\n    text-align: left;\n    .@{css-prefix}-toolbar-divider {\n      margin-top: 0;\n    }\n  }\n\n  .@{css-prefix}-toolbar-btn {\n    flex: 0 0 auto;\n    display: inline-block;\n    border: 1px solid transparent;\n    height: 26px;\n    line-height: 26px;\n    min-width: 26px;\n    margin: 6px 1px 0;\n    padding: 0;\n    text-align: center;\n    border-radius: 2px;\n\n    &.disabled {\n      pointer-events: none;\n      opacity: 0.5;\n    }\n\n    &:hover, &.active {\n      background: rgba(0, 0, 0, .08);\n    }\n  }\n}\n\n.@{css-prefix}-toolbar-divider {\n  display: inline-block;\n  border-right: 1px solid #e0e2e4;\n  width: 0;\n  vertical-align: middle;\n  height: 18px;\n  margin: 12px 3px 0;\n}\n\n.@{css-prefix}-print {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 100;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.@{css-prefix}-print-bar {\n  background: #424242;\n  height: 60px;\n  line-height: 60px;\n  padding: 0 30px;\n\n  .-title {\n    color: #fff;\n    font-weight: bold;\n    font-size: 1.2em;\n    float: left;\n  }\n\n  .-right {\n    float: right;\n    margin-top: 12px;\n  }\n}\n.@{css-prefix}-print-content {\n  display: flex;\n  flex: auto;\n  flex-direction: row;\n  background: #d0d0d0;\n  height: calc(100% - 60px);\n\n  .-sider {\n    flex: 0 0 300px;\n    width: 300px;\n    border-left: 2px solid #ccc;\n    background: #fff;\n  }\n\n  .-content {\n    flex: auto;\n    overflow-x: auto;\n    overflow-y: scroll;\n    height: 100%;\n  }\n}\n\n\n.@{css-prefix}-canvas-card-wraper {\n  margin: 40px 20px;\n}\n.@{css-prefix}-canvas-card {\n  background: #fff;\n  margin: auto;\n  page-break-before: auto;\n  page-break-after: always;\n  box-shadow: 0 8px 10px 1px rgba(0,0,0,0.14), 0 3px 14px 3px rgba(0,0,0,0.12), 0 4px 5px 0 rgba(0,0,0,0.20);\n}\n\n.@{css-prefix}-calendar {\n  color: rgba(0,0,0,.65);\n  background: #ffffff;\n  user-select: none;\n\n  .calendar-header {\n    font-weight: 700;\n    line-height: 30px;\n    text-align: center;\n    width: 100%;\n    float: left;\n    background: #f9fafb;\n\n    .calendar-header-left {\n      padding-left: 5px;\n      float: left;\n    }\n\n    .calendar-header-right {\n      float: right;\n\n      a {\n        padding: 3px 0;\n        margin-right: 2px;\n        border-radius: 2px;\n      }\n      a:hover {\n        background: rgba(0,0,0,.08);\n      }\n    }\n  }\n\n  .calendar-body {\n    border-collapse: collapse;\n    border-spacing: 0;\n\n    th, td {\n      width: 100%/7;\n      min-width: 32px;\n      text-align: center;\n      font-weight: 700;\n      line-height: 30px;\n      padding: 0;\n    }\n\n    td > .cell {\n      // border: 1px solid rgba(0,0,0,.05);\n\n      &:hover {\n        background: #ecf6fd;\n      }\n\n      &.active, &.active:hover {\n        background: #ecf6fd;\n        color: #2185D0;\n      }\n\n      &.disabled {\n        pointer-events: none;\n        opacity: 0.5;\n      }\n    }\n  }\n}\n\n.@{css-prefix}-datepicker {\n  box-shadow: 2px 2px 5px rgba(0,0,0,.2);\n  position: absolute;\n  left: 0;\n  top: calc(100% + 5px);\n  z-index: 10;\n  width: auto;\n}\n\n.@{css-prefix}-buttons {\n  display: flex;\n  justify-content: flex-end;\n\n  .@{css-prefix}-button {\n    margin-left: 8px;\n  }\n}\n.@{css-prefix}-button {\n  display: inline-block;\n  border-radius: 3px;\n  line-height: 1em;\n  min-height: 1em;\n  white-space: nowrap;\n  text-align: center;\n  cursor: pointer;\n  font-size: 1em;\n  font-weight: 700;\n  padding: .75em 1em;\n  color: rgba(0,0,0,.6);\n  background: #E0E1E2;\n  text-decoration: none;\n  font-family: \"Lato\",\"proxima-nova\",\"Helvetica Neue\",Arial,sans-serif;\n  //box-shadow: 0px 1px 2px -1px rgba(255,255,255,0.5) inset, 0px -2px 0px 0px rgba(0,0,0,0.1) inset;\n  //box-shadow: 0 0 0 0 rgba(0,0,0,.5) inset;\n  outline: none;\n  vertical-align: baseline;\n  zoom: 1;\n  user-select: none;\n  transition: all 0.1s linear;\n\n  &.active, &:hover {\n    background-color: #C0C1C2;\n    color: rgba(0,0,0,.8);\n  }\n\n  &.primary {\n    .type-primary;\n  }\n}\n\n// form begin\n.@{css-prefix}-form-input {\n  font-size: 1em;\n  position: relative;\n  font-weight: 400;\n  display: inline-flex;\n  color: rgba(0,0,0,.87);\n\n  input {\n    z-index: 1;\n    margin: 0;\n    max-width: 100%;\n    flex: 1 0 auto;\n    outline: 0;\n    -webkit-tap-highlight-color: rgba(255,255,255,0);\n    text-align: left;\n    line-height: @form-field-height;\n    height: @form-field-height;\n    padding: 0 8px;\n    background: #fff;\n    border: 1px solid #e9e9e9;\n    border-radius: 3px;\n    transition: box-shadow .1s ease,border-color .1s ease;\n    box-shadow: inset 0 1px 2px hsla(0,0%,4%,.06);\n\n    &:focus {\n      border-color: rgb(75, 137, 255);\n      box-shadow: inset 0 1px 2px rgba(75, 137, 255, .2);\n    }\n  }\n}\n\n.@{css-prefix}-form-select {\n  position: relative;\n  display: inline-block;\n  background: #fff;\n  border: @input-border;\n  border-radius: 2px;\n  cursor: pointer;\n  color: rgba(0,0,0,.87);\n  user-select: none;\n  box-shadow: inset 0 1px 2px hsla(0,0%,4%,.06);\n\n  .input-text {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    min-width: 60px;\n    width: auto;\n    height: @form-field-height;\n    line-height: @form-field-height;\n    padding: 0 8px;\n  }\n}\n.@{css-prefix}-form-fields {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n\n  .@{css-prefix}-form-field {\n    flex: 0 1 auto;\n    .label {\n      display: inline-block;\n      margin: 0 10px 0 0;\n    }\n  }\n}\n.@{css-prefix}-form-field {\n  display: block;\n  vertical-align: middle;\n  margin-left: 10px;\n  margin-bottom: 10px;\n\n  &:first-child {\n    margin-left: 0;\n  }\n\n  &.error {\n    .@{css-prefix}-form-select, input {\n      border-color: #f04134;\n    }\n  }\n\n  .tip {\n    color: #f04134;\n    font-size: .9em;\n  }\n}\n// form end\n.@{css-prefix}-dimmer {\n  display: none;\n  position: absolute;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  vertical-align: middle;\n  background-color: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-duration: 0.5s;\n  animation-duration: 0.5s;\n  transition: background-color 0.5s linear;\n  user-select: none;\n  z-index: 1000;\n\n  &.active {\n    display: block;\n    opacity: 1;\n  }\n}\n\nform fieldset {\n  border: none;\n\n  label {\n    display: block;\n    margin-bottom: .5em;\n    font-size: 1em;\n    color: #666;\n  }\n\n  select {\n    font-size: 1.1em;\n    width: 100%;\n    background-color: #fff;\n    border: none;\n    border-bottom: 2px solid #ddd;\n    padding: .5em .85em;\n    border-radius: 2px;\n  }\n}\n\n.@{css-prefix}-modal, .@{css-prefix}-toast {\n  font-size: 13px;\n  position: fixed;\n  z-index: 1001;\n  text-align: left;\n  line-height: @line-height;\n  min-width: 360px;\n  color: rgba(0,0,0,.87);\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  border-radius: 4px;\n  border: 1px solid rgba(0,0,0,.1);\n  background-color: #fff;\n  background-clip: padding-box;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 8px;\n}\n\n.@{css-prefix}-toast {\n  background-color: rgba(255,255,255,.85);\n}\n\n.@{css-prefix}-modal-header, .@{css-prefix}-toast-header {\n  font-weight: 600;\n  background-clip: padding-box;\n  background-color: rgba(255,255,255,.85);\n  border-bottom: 1px solid rgba(0,0,0,.05);\n  border-radius: 4px 4px 0 0;\n\n  .@{css-prefix}-icon {\n    position: absolute;\n    right: .8em;\n    top: .65em;\n    border-radius: 18px;\n\n    &:hover {\n      opacity: 1;\n      background: rgba(0, 0, 0, 0.08);\n    }\n  }\n}\n\n.@{css-prefix}-toast-header {\n  color: @orange-color;\n}\n\n.@{css-prefix}-modal-header {\n  border-bottom: @border-style;\n  background: rgba(0, 0, 0, .08);\n  font-size: 1.0785em;\n}\n\n.@{css-prefix}-modal-header,\n.@{css-prefix}-modal-content,\n.@{css-prefix}-toast-header,\n.@{css-prefix}-toast-content {\n  padding: .75em 1em;\n}\n\n@media screen and (min-width: 320px) and (max-width: 480px) {\n  .@{css-prefix}-toolbar {\n    display: none;\n  }\n}\n\n.@{css-prefix}-icon {\n  width: 18px;\n  height: 18px;\n  margin: 1px 1px 2px 1px;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n\n  .@{css-prefix}-icon-img {\n    background-image: url('../assets/sprite.svg');\n    position: absolute;\n    width: 262px;\n    height: 444px;\n    opacity: 0.56;\n\n    &.undo {\n      left: 0;\n      top: 0;\n    }\n    &.redo {\n      left: -1 * @icon-size;\n      top: 0;\n    }\n    &.print {\n      left: -2 * @icon-size;\n      top: 0;\n    }\n    &.paintformat {\n      left: -3 * @icon-size;\n      top: 0;\n    }\n    &.clearformat {\n      left: -4 * @icon-size;\n      top: 0;\n    }\n    &.font-bold {\n      left: -5 * @icon-size;\n      top: 0;\n    }\n    &.font-italic {\n      left: -6 * @icon-size;\n      top: 0;\n    }\n    &.underline {\n      left: -7 * @icon-size;\n      top: 0;\n    }\n    &.strike {\n      left: -8 * @icon-size;\n      top: 0;\n    }\n    &.color {\n      left: -9 * @icon-size;\n      top: 0;\n    }\n    &.bgcolor {\n      left: -10 * @icon-size;\n      top: 0;\n    }\n    &.merge {\n      left: -11 * @icon-size;\n      top: 0;\n    }\n    &.align-left {\n      left: -12 * @icon-size;\n      top: 0;\n    }\n    &.align-center {\n      left: -13 * @icon-size;\n      top: 0;\n    }\n    &.align-right {\n      left: 0;\n      top: -1 * @icon-size;\n    }\n    &.align-top {\n      left: -1 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.align-middle {\n      left: -2 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.align-bottom {\n      left: -3 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.textwrap {\n      left: -4 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.autofilter {\n      left: -5 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.formula {\n      left: -6 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.arrow-down {\n      left: -7 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.arrow-right {\n      left: -8 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.link {\n      left: -9 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.chart {\n      left: -10 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.freeze {\n      left: -11 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.ellipsis {\n      left: -12 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.add {\n      left: -13 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.border-all {\n      left: 0;\n      top: -2 * @icon-size;\n    }\n    &.border-inside {\n      left: -1 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-horizontal {\n      left: -2 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-vertical {\n      left: -3 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-outside {\n      left: -4 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-left {\n      left: -5 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-top {\n      left: -6 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-right {\n      left: -7 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-bottom {\n      left: -8 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-none {\n      left: -9 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.line-color {\n      left: -10 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.line-type {\n      left: -11 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.close {\n      left: -13 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.chevron-down {\n      left: 0;\n      top: -3 * @icon-size;\n    }\n    &.chevron-up {\n      left: -1 * @icon-size;\n      top: -3 * @icon-size;\n    }\n    &.chevron-left {\n      left: -2 * @icon-size;\n      top: -3 * @icon-size;\n    }\n    &.chevron-right {\n      left: -3 * @icon-size;\n      top: -3 * @icon-size;\n    }\n    &.comment {\n      left: -10 * @icon-size;\n      top: -2 * @icon-size;\n    }\n  }\n}\n"],sourceRoot:""}]);const d=A},945:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var i=n(15),s=n.n(i),r=n(645),o=n.n(r)()(s());o.push([e.id,"\n.test[data-v-d0e03dde] {\n  color: red;\n}\n.slots[data-v-d0e03dde] {\n  height: 200px;\n  display: block;\n}\n","",{version:3,sources:["webpack://src/vueXSpreadsheet.vue"],names:[],mappings:";AAqCA;EACA,UAAA;AACA;AACA;EACA,aAAA;EACA,cAAA;AACA",sourcesContent:['<template>\n  <div>\n    <div id="jman-x-spreadsheet"></div>\n    <div class="slots">\n      <slot name="a"></slot>\n      <slot></slot>\n      <slot name="btn"/>\n    </div>\n  </div>\n</template>\n<script>\nimport "./xspreadsheet/index.less";\nimport x_spreadsheet from "./xspreadsheet/index";\n\n\nexport default {\n  name: "vue-x-spreadsheet",\n  props: {\n    options: Object,\n    data: Array,\n  },\n  created() {\n    this.$slots;\n  },\n\n  mounted() {\n    this.$slots;\n     x_spreadsheet.locale(this.options.local || "zh-cn");\n    delete this.options.locale\n    this.x_spreadsheet = new x_spreadsheet("#jman-x-spreadsheet", this.options).loadData(\n      this.data\n    );\n    this.$emit(\'getInstance\',this.x_spreadsheet)\n  },\n};\n<\/script>\n<style scoped>\n.test {\n  color: red;\n}\n.slots {\n  height: 200px;\n  display: block;\n}\n</style>\n'],sourceRoot:""}]);const l=o},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var s={};if(i)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(s[o]=!0)}for(var l=0;l<e.length;l++){var a=[].concat(e[l]);i&&s[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),t.push(a))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}e.exports=function(e){var n,i,s=(i=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,s=!1,r=void 0;try{for(var o,l=e[Symbol.iterator]();!(i=(o=l.next()).done)&&(n.push(o.value),!t||n.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==l.return||l.return()}finally{if(s)throw r}}return n}}(n,i)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?t(e,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=s[1],o=s[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),h="/*# ".concat(a," */"),A=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(A).concat([h]).join("\n")}return[r].join("\n")}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},452:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i=n.p+"28a6df6fc2a815a964dd76805aa8a3e6.svg"},379:(e,t,n)=>{"use strict";var i,s=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function o(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],s=0;s<e.length;s++){var l=e[s],a=t.base?l[0]+t.base:l[0],h=n[a]||0,A="".concat(a," ").concat(h);n[a]=h+1;var c=o(A),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==c?(r[c].references++,r[c].updater(d)):r.push({identifier:A,updater:u(d,t),references:1}),i.push(A)}return i}function a(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var o=s(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var h,A=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function c(e,t,n,i){var s=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=A(t,s);else{var r=document.createTextNode(s),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function d(e,t,n){var i=n.css,s=n.media,r=n.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var p=null,f=0;function u(e,t){var n,i,s;if(t.singleton){var r=f++;n=p||(p=a(t)),i=c.bind(null,n,r,!1),s=c.bind(null,n,r,!0)}else n=a(t),i=d.bind(null,n,t),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else s()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var s=o(n[i]);r[s].references--}for(var a=l(e,t),h=0;h<n.length;h++){var A=o(n[h]);0===r[A].references&&(r[A].updater(),r.splice(A,1))}n=a}}}},113:(e,t,n)=>{var i=n(945);"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),(0,n(346).Z)("1fd0d737",i,!1,{})},346:(e,t,n)=>{"use strict";function i(e,t){for(var n=[],i={},s=0;s<t.length;s++){var r=t[s],o=r[0],l={id:e+":"+s,css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(l):n.push(i[o]={id:o,parts:[l]})}return n}n.d(t,{Z:()=>f});var s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var r={},o=s&&(document.head||document.getElementsByTagName("head")[0]),l=null,a=0,h=!1,A=function(){},c=null,d="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e,t,n,s){h=n,c=s||{};var o=i(e,t);return u(o),function(t){for(var n=[],s=0;s<o.length;s++){var l=o[s];(a=r[l.id]).refs--,n.push(a)}for(t?u(o=i(e,t)):o=[],s=0;s<n.length;s++){var a;if(0===(a=n[s]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}}function u(e){for(var t=0;t<e.length;t++){var n=e[t],i=r[n.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](n.parts[s]);for(;s<n.parts.length;s++)i.parts.push(x(n.parts[s]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{var o=[];for(s=0;s<n.parts.length;s++)o.push(x(n.parts[s]));r[n.id]={id:n.id,refs:1,parts:o}}}}function g(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function x(e){var t,n,i=document.querySelector("style["+d+'~="'+e.id+'"]');if(i){if(h)return A;i.parentNode.removeChild(i)}if(p){var s=a++;i=l||(l=g()),t=E.bind(null,i,s,!1),n=E.bind(null,i,s,!0)}else i=g(),t=C.bind(null,i),n=function(){i.parentNode.removeChild(i)};return t(e),function(i){if(i){if(i.css===e.css&&i.media===e.media&&i.sourceMap===e.sourceMap)return;t(e=i)}else n()}}var m,b=(m=[],function(e,t){return m[e]=t,m.filter(Boolean).join("\n")});function E(e,t,n,i){var s=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=b(t,s);else{var r=document.createTextNode(s),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function C(e,t){var n=t.css,i=t.media,s=t.sourceMap;if(i&&e.setAttribute("media",i),c.ssrId&&e.setAttribute(d,t.id),s&&(n+="\n/*# sourceURL="+s.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},519:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>Ti});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{attrs:{id:"jman-x-spreadsheet"}}),e._v(" "),n("div",{staticClass:"slots"},[e._t("a"),e._v(" "),e._t("default"),e._v(" "),e._t("btn")],2)])};i._withStripped=!0;var s=n(379),r=n.n(s),o=n(140);r()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;class l{constructor(e,t=""){"string"==typeof e?(this.el=document.createElement(e),this.el.className=t):this.el=e,this.data={}}data(e,t){return void 0!==t?(this.data[e]=t,this):this.data[e]}on(e,t){const[n,...i]=e.split(".");let s=n;return"mousewheel"===s&&/Firefox/i.test(window.navigator.userAgent)&&(s="DOMMouseScroll"),this.el.addEventListener(s,(e=>{t(e);for(let t=0;t<i.length;t+=1){const n=i[t];if("left"===n&&0!==e.button)return;if("right"===n&&2!==e.button)return;"stop"===n&&e.stopPropagation()}})),this}offset(e){if(void 0!==e)return Object.keys(e).forEach((t=>{this.css(t,e[t]+"px")})),this;const{offsetTop:t,offsetLeft:n,offsetHeight:i,offsetWidth:s}=this.el;return{top:t,left:n,height:i,width:s}}scroll(e){const{el:t}=this;return void 0!==e&&(void 0!==e.left&&(t.scrollLeft=e.left),void 0!==e.top&&(t.scrollTop=e.top)),{left:t.scrollLeft,top:t.scrollTop}}box(){return this.el.getBoundingClientRect()}parent(){return new l(this.el.parentNode)}children(...e){return 0===arguments.length?this.el.childNodes:(e.forEach((e=>this.child(e))),this)}removeChild(e){this.el.removeChild(e)}child(e){let t=e;return"string"==typeof e?t=document.createTextNode(e):e instanceof l&&(t=e.el),this.el.appendChild(t),this}contains(e){return this.el.contains(e)}className(e){return void 0!==e?(this.el.className=e,this):this.el.className}addClass(e){return this.el.classList.add(e),this}hasClass(e){return this.el.classList.contains(e)}removeClass(e){return this.el.classList.remove(e),this}toggle(e="active"){return this.toggleClass(e)}toggleClass(e){return this.el.classList.toggle(e)}active(e=!0,t="active"){return e?this.addClass(t):this.removeClass(t),this}checked(e=!0){return this.active(e,"checked"),this}disabled(e=!0){return e?this.addClass("disabled"):this.removeClass("disabled"),this}attr(e,t){if(void 0!==t)this.el.setAttribute(e,t);else{if("string"==typeof e)return this.el.getAttribute(e);Object.keys(e).forEach((t=>{this.el.setAttribute(t,e[t])}))}return this}removeAttr(e){return this.el.removeAttribute(e),this}html(e){return void 0!==e?(this.el.innerHTML=e,this):this.el.innerHTML}val(e){return void 0!==e?(this.el.value=e,this):this.el.value}focus(){this.el.focus()}cssRemoveKeys(...e){return e.forEach((e=>this.el.style.removeProperty(e))),this}css(e,t){return void 0===t&&"string"!=typeof e?(Object.keys(e).forEach((t=>{this.el.style[t]=e[t]})),this):void 0!==t?(this.el.style[e]=t,this):this.el.style[e]}computedStyle(){return window.getComputedStyle(this.el,null)}show(){return this.css("display","block"),this}hide(){return this.css("display","none"),this}}const a=(e,t="")=>new l(e,t),h=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];function A(e){let t="",n=e;for(;n>=h.length;)n/=h.length,n-=1,t+=h[parseInt(n,10)%h.length];return t+=h[e%h.length],t}function c(e){let t=0;for(let n=0;n<e.length-1;n+=1){const i=e.charCodeAt(n)-65,s=e.length-1-n;t+=h.length**s+h.length*i}return t+=e.charCodeAt(e.length-1)-65,t}function d(e){let t="",n="";for(let i=0;i<e.length;i+=1)e.charAt(i)>="0"&&e.charAt(i)<="9"?n+=e.charAt(i):t+=e.charAt(i);return[c(t),parseInt(n,10)-1]}function p(e,t){return`${A(e)}${t+1}`}function f(e,t,n,i=(()=>!0)){if(0===t&&0===n)return e;const[s,r]=d(e);return i(s,r)?p(s+t,r+n):e}class u{constructor(e,t,n,i,s=0,r=0){this.sri=e,this.sci=t,this.eri=n,this.eci=i,this.w=s,this.h=r}set(e,t,n,i){this.sri=e,this.sci=t,this.eri=n,this.eci=i}multiple(){return this.eri-this.sri>0||this.eci-this.sci>0}includes(...e){let[t,n]=[0,0];1===e.length?[n,t]=d(e[0]):2===e.length&&([t,n]=e);const{sri:i,sci:s,eri:r,eci:o}=this;return i<=t&&t<=r&&s<=n&&n<=o}each(e,t=(()=>!0)){const{sri:n,sci:i,eri:s,eci:r}=this;for(let o=n;o<=s;o+=1)if(t(o))for(let t=i;t<=r;t+=1)e(o,t)}contains(e){return this.sri<=e.sri&&this.sci<=e.sci&&this.eri>=e.eri&&this.eci>=e.eci}within(e){return this.sri>=e.sri&&this.sci>=e.sci&&this.eri<=e.eri&&this.eci<=e.eci}disjoint(e){return this.sri>e.eri||this.sci>e.eci||e.sri>this.eri||e.sci>this.eci}intersects(e){return this.sri<=e.eri&&this.sci<=e.eci&&e.sri<=this.eri&&e.sci<=this.eci}union(e){const{sri:t,sci:n,eri:i,eci:s}=this;return new u(e.sri<t?e.sri:t,e.sci<n?e.sci:n,e.eri>i?e.eri:i,e.eci>s?e.eci:s)}difference(e){const t=[],n=(e,n,i,s)=>{t.push(new u(e,n,i,s))},{sri:i,sci:s,eri:r,eci:o}=this,l=e.sri-i,a=e.sci-s,h=r-e.eri,A=o-e.eci;return l>0?(n(i,s,e.sri-1,o),h>0?(n(e.eri+1,s,r,o),a>0&&n(e.sri,s,e.eri,e.sci-1),A>0&&n(e.sri,e.eci+1,e.eri,o)):(a>0&&n(e.sri,s,r,e.sci-1),A>0&&n(e.sri,e.eci+1,r,o))):h>0&&(n(e.eri+1,s,r,o),a>0&&n(i,s,e.eri,e.sci-1),A>0&&n(i,e.eci+1,e.eri,o)),a>0?(n(i,s,r,e.sci-1),A>0?(n(i,e.eri+1,r,o),l>0&&n(i,e.sci,e.sri-1,e.eci),h>0&&n(e.sri+1,e.sci,r,e.eci)):(l>0&&n(i,e.sci,e.sri-1,o),h>0&&n(e.sri+1,e.sci,r,o))):A>0&&(n(r,e.eci+1,r,o),l>0&&n(i,s,e.sri-1,e.eci),h>0&&n(e.eri+1,s,r,e.eci)),t}size(){return[this.eri-this.sri+1,this.eci-this.sci+1]}toString(){const{sri:e,sci:t,eri:n,eci:i}=this;let s=p(t,e);return this.multiple()&&(s=`${s}:${p(i,n)}`),s}clone(){const{sri:e,sci:t,eri:n,eci:i,w:s,h:r}=this;return new u(e,t,n,i,s,r)}equals(e){return this.eri===e.eri&&this.eci===e.eci&&this.sri===e.sri&&this.sci===e.sci}static valueOf(e){const t=e.split(":"),[n,i]=d(t[0]);let[s,r]=[i,n];return t.length>1&&([r,s]=d(t[1])),new u(i,n,s,r)}}class g{constructor(){this.range=new u(0,0,0,0),this.ri=0,this.ci=0}multiple(){return this.range.multiple()}setIndexes(e,t){this.ri=e,this.ci=t}size(){return this.range.size()}}class x{constructor(){this.x=0,this.y=0,this.ri=0,this.ci=0}}class m{constructor(){this.undoItems=[],this.redoItems=[]}add(e){this.undoItems.push(JSON.stringify(e)),this.redoItems=[]}canUndo(){return this.undoItems.length>0}canRedo(){return this.redoItems.length>0}undo(e,t){const{undoItems:n,redoItems:i}=this;this.canUndo()&&(i.push(JSON.stringify(e)),t(JSON.parse(n.pop())))}redo(e,t){const{undoItems:n,redoItems:i}=this;this.canRedo()&&(n.push(JSON.stringify(e)),t(JSON.parse(i.pop())))}}class b{constructor(){this.range=null,this.state="clear"}copy(e){return this.range=e,this.state="copy",this}cut(e){return this.range=e,this.state="cut",this}isCopy(){return"copy"===this.state}isCut(){return"cut"===this.state}isClear(){return"clear"===this.state}clear(){this.range=null,this.state="clear"}}class E{constructor(e,t,n){this.ci=e,this.operator=t,this.value=n}set(e,t){this.operator=e,this.value=t}includes(e){const{operator:t,value:n}=this;return"all"===t||"in"===t&&n.includes(e)}vlength(){const{operator:e,value:t}=this;return"in"===e?t.length:0}getData(){const{ci:e,operator:t,value:n}=this;return{ci:e,operator:t,value:n}}}class C{constructor(e,t){this.ci=e,this.order=t}asc(){return"asc"===this.order}desc(){return"desc"===this.order}}class w{constructor(){this.ref=null,this.filters=[],this.sort=null}setData({ref:e,filters:t,sort:n}){null!=e&&(this.ref=e,this.filters=t.map((e=>new E(e.ci,e.operator,e.value))),n&&(this.sort=new C(n.ci,n.order)))}getData(){if(this.active()){const{ref:e,filters:t,sort:n}=this;return{ref:e,filters:t.map((e=>e.getData())),sort:n}}return{}}addFilter(e,t,n){const i=this.getFilter(e);null==i?this.filters.push(new E(e,t,n)):i.set(t,n)}setSort(e,t){this.sort=t?new C(e,t):null}includes(e,t){return!!this.active()&&this.hrange().includes(e,t)}getSort(e){const{sort:t}=this;return t&&t.ci===e?t:null}getFilter(e){const{filters:t}=this;for(let n=0;n<t.length;n+=1)if(t[n].ci===e)return t[n];return null}filteredRows(e){const t=new Set,n=new Set;if(this.active()){const{sri:i,eri:s}=this.range(),{filters:r}=this;for(let o=i+1;o<=s;o+=1)for(let i=0;i<r.length;i+=1){const s=r[i],l=e(o,s.ci),a=l?l.text:"";if(!s.includes(a)){t.add(o);break}n.add(o)}}return{rset:t,fset:n}}items(e,t){const n={};if(this.active()){const{sri:i,eri:s}=this.range();for(let r=i+1;r<=s;r+=1){const i=t(r,e);if(null===i||/^\s*$/.test(i.text))n[""]=(n[""]||0)+1;else{const e=i.text,t=(n[e]||0)+1;n[e]=t}}}return n}range(){return u.valueOf(this.ref)}hrange(){const e=this.range();return e.eri=e.sri,e}clear(){this.ref=null,this.filters=[],this.sort=null}active(){return null!==this.ref}}class v{constructor(e=[]){this._=e}forEach(e){this._.forEach(e)}deleteWithin(e){this._=this._.filter((t=>!t.within(e)))}getFirstIncludes(e,t){for(let n=0;n<this._.length;n+=1){const i=this._[n];if(i.includes(e,t))return i}return null}filterIntersects(e){return new v(this._.filter((t=>t.intersects(e))))}intersects(e){for(let t=0;t<this._.length;t+=1)if(this._[t].intersects(e))return!0;return!1}union(e){let t=e;return this._.forEach((e=>{e.intersects(t)&&(t=e.union(t))})),t}add(e){this.deleteWithin(e),this._.push(e)}shift(e,t,n,i){this._.forEach((s=>{const{sri:r,sci:o,eri:l,eci:a}=s,h=s;"row"===e?r>=t?(h.sri+=n,h.eri+=n):r<t&&t<=l&&(h.eri+=n,i(r,o,n,0)):"column"===e&&(o>=t?(h.sci+=n,h.eci+=n):o<t&&t<=a&&(h.eci+=n,i(r,o,0,n)))}))}move(e,t,n){this._.forEach((i=>{const s=i;s.within(e)&&(s.eri+=t,s.sri+=t,s.sci+=n,s.eci+=n)}))}setData(e){return this._=e.map((e=>u.valueOf(e))),this}getData(){return this._.map((e=>e.toString()))}}const y=(e={},...t)=>(t.forEach((t=>{Object.keys(t).forEach((n=>{const i=t[n];"string"==typeof i||"number"==typeof i||"boolean"==typeof i?e[n]=i:"function"!=typeof i&&!Array.isArray(i)&&i instanceof Object?(e[n]=e[n]||{},y(e[n],i)):e[n]=i}))})),e);function k(e){const t=""+e;let n=0,i=!1;for(let e=0;e<t.length;e+=1)!0===i&&(n+=1),"."===t.charAt(e)&&(i=!0);return n}function B(e,t,n){if(Number.isNaN(t)||Number.isNaN(n))return t+e+n;const i=k(t),s=k(n),r=Number(t),o=Number(n);let l=0;if("-"===e)l=r-o;else if("+"===e)l=r+o;else if("*"===e)l=r*o;else if("/"===e)return l=r/o,k(l)>5?l.toFixed(2):l;return l.toFixed(Math.max(i,s))}const z=function(e){return JSON.parse(JSON.stringify(e))},S=(...e)=>y({},...e),M=function e(t,n){const i=Object.keys(t);if(i.length!==Object.keys(n).length)return!1;for(let s=0;s<i.length;s+=1){const r=i[s],o=t[r],l=n[r];if(void 0===l)return!1;if("string"==typeof o||"number"==typeof o||"boolean"==typeof o){if(o!==l)return!1}else if(Array.isArray(o)){if(o.length!==l.length)return!1;for(let t=0;t<o.length;t+=1)if(!e(o[t],l[t]))return!1}else if("function"!=typeof o&&!Array.isArray(o)&&o instanceof Object&&!e(o,l))return!1}return!0},I=function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n+=1)if(e[n]!==t[n])return!1;return!0},N=function(e,t,n){let i=0;for(let s=e;s<t;s+=1)i+=n(s);return i},D=function(e,t,n,i,s,r){let o=n,l=i,a=e;for(;a<t&&!(o>s);a+=1)l=r(a),o+=l;return[a,o-l,l]};class T{constructor({len:e,height:t}){this._={},this.len=e,this.height=t}getHeight(e){if(this.isHide(e))return 0;const t=this.get(e);return t&&t.height?t.height:this.height}setHeight(e,t){this.getOrNew(e).height=t}unhide(e){let t=e;for(;t>0&&(t-=1,this.isHide(t));)this.setHide(t,!1)}isHide(e){const t=this.get(e);return t&&t.hide}setHide(e,t){const n=this.getOrNew(e);!0===t?n.hide=!0:delete n.hide}setStyle(e,t){this.getOrNew(e).style=t}sumHeight(e,t,n){return N(e,t,(e=>n&&n.has(e)?0:this.getHeight(e)))}totalHeight(){return this.sumHeight(0,this.len)}get(e){return this._[e]}getOrNew(e){return this._[e]=this._[e]||{cells:{}},this._[e]}getCell(e,t){const n=this.get(e);return void 0!==n&&void 0!==n.cells&&void 0!==n.cells[t]?n.cells[t]:null}getCellMerge(e,t){const n=this.getCell(e,t);return n&&n.merge?n.merge:[0,0]}getCellOrNew(e,t){const n=this.getOrNew(e);return n.cells[t]=n.cells[t]||{},n.cells[t]}setCell(e,t,n,i="all"){const s=this.getOrNew(e);"all"===i?s.cells[t]=n:"text"===i?(s.cells[t]=s.cells[t]||{},s.cells[t].text=n.text):"format"===i&&(s.cells[t]=s.cells[t]||{},s.cells[t].style=n.style,n.merge&&(s.cells[t].merge=n.merge))}setCellText(e,t,n){this.getCellOrNew(e,t).text=n}copyPaste(e,t,n,i=!1,s=(()=>{})){const{sri:r,sci:o,eri:l,eci:a}=e,h=t.sri,A=t.sci,c=t.eri,d=t.eci,[p,u]=e.size(),[g,x]=t.size();let m=!0,b=0;(c<r||d<o)&&(m=!1,b=c<r?g:x);for(let e=r;e<=l;e+=1)if(this._[e])for(let t=o;t<=a;t+=1)if(this._[e].cells&&this._[e].cells[t])for(let g=h;g<=c;g+=p)for(let x=A;x<=d;x+=u){const E=g+(e-r),C=x+(t-o),w=z(this._[e].cells[t]);if(i&&w&&w.text&&w.text.length>0){const{text:e}=w;let t=x-A+(g-h)+2;if(m||(t-=b+1),"="===e[0])w.text=e.replace(/[a-zA-Z]{1,3}\d+/g,(e=>{let[n,i]=[0,0];return r===h?n=t-1:i=t-1,/^\d+$/.test(e)?e:f(e,n,i)}));else if(p<=1&&u>1&&(h>l||c<r)||u<=1&&p>1&&(A>a||d<o)||p<=1&&u<=1){const n=/[\\.\d]+$/.exec(e);if(null!==n){const i=Number(n[0])+t-1;w.text=e.substring(0,n.index)+i}}}this.setCell(E,C,w,n),s(E,C,w)}}cutPaste(e,t){const n={};this.each((i=>{this.eachCells(i,(s=>{let r=parseInt(i,10),o=parseInt(s,10);e.includes(i,s)&&(r=t.sri+(r-e.sri),o=t.sci+(o-e.sci)),n[r]=n[r]||{cells:{}},n[r].cells[o]=this._[i].cells[s]}))})),this._=n}paste(e,t){if(e.length<=0)return;const{sri:n,sci:i}=t;e.forEach(((e,t)=>{const s=n+t;e.forEach(((e,t)=>{const n=i+t;this.setCellText(s,n,e)}))}))}insert(e,t=1){const n={};this.each(((i,s)=>{let r=parseInt(i,10);r>=e&&(r+=t,this.eachCells(i,((n,i)=>{i.text&&"="===i.text[0]&&(i.text=i.text.replace(/[a-zA-Z]{1,3}\d+/g,(n=>f(n,0,t,((t,n)=>n>=e)))))}))),n[r]=s})),this._=n,this.len+=t}delete(e,t){const n=t-e+1,i={};this.each(((s,r)=>{const o=parseInt(s,10);o<e?i[o]=r:s>t&&(i[o-n]=r,this.eachCells(s,((e,i)=>{i.text&&"="===i.text[0]&&(i.text=i.text.replace(/[a-zA-Z]{1,3}\d+/g,(e=>f(e,0,-n,((e,n)=>n>t)))))})))})),this._=i,this.len-=n}insertColumn(e,t=1){this.each(((n,i)=>{const s={};this.eachCells(n,((n,i)=>{let r=parseInt(n,10);r>=e&&(r+=t,i.text&&"="===i.text[0]&&(i.text=i.text.replace(/[a-zA-Z]{1,3}\d+/g,(n=>f(n,t,0,(t=>t>=e)))))),s[r]=i})),i.cells=s}))}deleteColumn(e,t){const n=t-e+1;this.each(((i,s)=>{const r={};this.eachCells(i,((i,s)=>{const o=parseInt(i,10);o<e?r[o]=s:o>t&&(r[o-n]=s,s.text&&"="===s.text[0]&&(s.text=s.text.replace(/[a-zA-Z]{1,3}\d+/g,(e=>f(e,-n,0,(e=>e>t))))))})),s.cells=r}))}deleteCells(e,t="all"){e.each(((e,n)=>{this.deleteCell(e,n,t)}))}deleteCell(e,t,n="all"){const i=this.get(e);if(null!==i){const s=this.getCell(e,t);null!==s&&("all"===n?delete i.cells[t]:"text"===n?(s.text&&delete s.text,s.value&&delete s.value):"format"===n?(void 0!==s.style&&delete s.style,s.merge&&delete s.merge):"merge"===n&&s.merge&&delete s.merge)}}maxCell(){const e=Object.keys(this._),t=e[e.length-1],n=this._[t];if(n){const{cells:e}=n,i=Object.keys(e),s=i[i.length-1];return[parseInt(t,10),parseInt(s,10)]}return[0,0]}each(e){Object.entries(this._).forEach((([t,n])=>{e(t,n)}))}eachCells(e,t){this._[e]&&this._[e].cells&&Object.entries(this._[e].cells).forEach((([e,n])=>{t(e,n)}))}setData(e){e.len&&(this.len=e.len,delete e.len),this._=e}getData(){const{len:e}=this;return Object.assign({len:e},this._)}}class R{constructor({len:e,width:t,indexWidth:n,minWidth:i}){this._={},this.len=e,this.width=t,this.indexWidth=n,this.minWidth=i}setData(e){e.len&&(this.len=e.len,delete e.len),this._=e}getData(){const{len:e}=this;return Object.assign({len:e},this._)}getWidth(e){if(this.isHide(e))return 0;const t=this._[e];return t&&t.width?t.width:this.width}getOrNew(e){return this._[e]=this._[e]||{},this._[e]}setWidth(e,t){this.getOrNew(e).width=t}unhide(e){let t=e;for(;t>0&&(t-=1,this.isHide(t));)this.setHide(t,!1)}isHide(e){const t=this._[e];return t&&t.hide}setHide(e,t){const n=this.getOrNew(e);!0===t?n.hide=!0:delete n.hide}setStyle(e,t){this.getOrNew(e).style=t}sumWidth(e,t){return N(e,t,(e=>this.getWidth(e)))}totalWidth(){return this.sumWidth(0,this.len)}}let O=["en"];const F={en:{toolbar:{undo:"Undo",redo:"Redo",print:"Print",paintformat:"Paint format",clearformat:"Clear format",format:"Format",fontName:"Font",fontSize:"Font size",fontBold:"Font bold",fontItalic:"Font italic",underline:"Underline",strike:"Strike",color:"Text color",bgcolor:"Fill color",border:"Borders",merge:"Merge cells",align:"Horizontal align",valign:"Vertical align",textwrap:"Text wrapping",freeze:"Freeze cell",autofilter:"Filter",formula:"Functions",more:"More"},contextmenu:{copy:"Copy",cut:"Cut",paste:"Paste",pasteValue:"Paste values only",pasteFormat:"Paste format only",hide:"Hide",insertRow:"Insert row",insertColumn:"Insert column",deleteSheet:"Delete",deleteRow:"Delete row",deleteColumn:"Delete column",deleteCell:"Delete cell",deleteCellText:"Delete cell text",validation:"Data validations",cellprintable:"Enable export",cellnonprintable:"Disable export",celleditable:"Enable editing",cellnoneditable:"Disable editing"},print:{size:"Paper size",orientation:"Page orientation",orientations:["Landscape","Portrait"]},format:{normal:"Normal",text:"Plain Text",number:"Number",percent:"Percent",rmb:"RMB",usd:"USD",eur:"EUR",date:"Date",time:"Time",datetime:"Date time",duration:"Duration"},formula:{sum:"Sum",average:"Average",max:"Max",min:"Min",_if:"IF",and:"AND",or:"OR",concat:"Concat"},validation:{required:"it must be required",notMatch:"it not match its validation rule",between:"it is between {} and {}",notBetween:"it is not between {} and {}",notIn:"it is not in list",equal:"it equal to {}",notEqual:"it not equal to {}",lessThan:"it less than {}",lessThanEqual:"it less than or equal to {}",greaterThan:"it greater than {}",greaterThanEqual:"it greater than or equal to {}"},error:{pasteForMergedCell:"Unable to do this for merged cells"},calendar:{weeks:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]},button:{next:"Next",cancel:"Cancel",remove:"Remove",save:"Save",ok:"OK"},sort:{desc:"Sort Z -> A",asc:"Sort A -> Z"},filter:{empty:"empty"},dataValidation:{mode:"Mode",range:"Cell Range",criteria:"Criteria",modeType:{cell:"Cell",column:"Colun",row:"Row"},type:{list:"List",number:"Number",date:"Date",phone:"Phone",email:"Email"},operator:{be:"between",nbe:"not betwwen",lt:"less than",lte:"less than or equal to",gt:"greater than",gte:"greater than or equal to",eq:"equal to",neq:"not equal to"}}},"zh-cn":{toolbar:{undo:"撤销",redo:"恢复",print:"打印",paintformat:"格式刷",clearformat:"清除格式",format:"数据格式",fontName:"字体",fontSize:"字号",fontBold:"加粗",fontItalic:"倾斜",underline:"下划线",strike:"删除线",color:"字体颜色",bgcolor:"填充颜色",border:"边框",merge:"合并单元格",align:"水平对齐",valign:"垂直对齐",textwrap:"自动换行",freeze:"冻结",autofilter:"自动筛选",formula:"函数",more:"更多",comment:"批注"},contextmenu:{copy:"复制",cut:"剪切",paste:"粘贴",pasteValue:"粘贴数据",pasteFormat:"粘贴格式",hide:"隐藏",insertRow:"插入行",insertColumn:"插入列",deleteSheet:"删除",deleteRow:"删除行",deleteColumn:"删除列",deleteCell:"删除",deleteCellText:"删除数据",validation:"数据验证",cellprintable:"可打印",cellnonprintable:"不可打印",celleditable:"可编辑",cellnoneditable:"不可编辑"},print:{size:"纸张大小",orientation:"方向",orientations:["横向","纵向"]},format:{normal:"正常",text:"文本",number:"数值",percent:"百分比",rmb:"人民币",usd:"美元",eur:"欧元",date:"短日期",time:"时间",datetime:"长日期",duration:"持续时间"},formula:{sum:"求和",average:"求平均值",max:"求最大值",min:"求最小值",concat:"字符拼接",_if:"条件判断",and:"和",or:"或"},validation:{required:"此值必填",notMatch:"此值不匹配验证规则",between:"此值应在 {} 和 {} 之间",notBetween:"此值不应在 {} 和 {} 之间",notIn:"此值不在列表中",equal:"此值应该等于 {}",notEqual:"此值不应该等于 {}",lessThan:"此值应该小于 {}",lessThanEqual:"此值应该小于等于 {}",greaterThan:"此值应该大于 {}",greaterThanEqual:"此值应该大于等于 {}"},error:{pasteForMergedCell:"无法对合并的单元格执行此操作"},calendar:{weeks:["日","一","二","三","四","五","六"],months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]},button:{next:"下一步",cancel:"取消",remove:"删除",save:"保存",ok:"确认"},sort:{desc:"降序",asc:"升序"},filter:{empty:"空白"},dataValidation:{mode:"模式",range:"单元区间",criteria:"条件",modeType:{cell:"单元格",column:"列模式",row:"行模式"},type:{list:"列表",number:"数字",date:"日期",phone:"手机号",email:"电子邮件"},operator:{be:"在区间",nbe:"不在区间",lt:"小于",lte:"小于等于",gt:"大于",gte:"大于等于",eq:"等于",neq:"不等于"}}}};function W(e,t){if(t)for(const n of O){if(!t[n])break;let i=t[n];const s=e.match(/(?:\\.|[^.])+/g);for(let e=0;e<s.length;e+=1){const t=i[s[e]];if(!t)break;if(e===s.length-1)return t;i=t}}}function H(e){let t=W(e,F);return!t&&window&&window.x_spreadsheet&&window.x_spreadsheet.$messages&&(t=W(e,window.x_spreadsheet.$messages)),t||""}function Y(e){return()=>H(e)}function U(e,t,n=!1){n?O=[e]:O.unshift(e),t&&(F[e]=t)}const q={phone:/^[1-9]\d{10}$/,email:/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/};function G(e,t,...n){let i="";return e||(i=H("validation."+t,...n)),[e,i]}class J{constructor(e,t,n,i){this.required=t,this.value=n,this.type=e,this.operator=i,this.message=""}parseValue(e){const{type:t}=this;return"date"===t?new Date(e):"number"===t?Number(e):e}equals(e){let t=this.type===e.type&&this.required===e.required&&this.operator===e.operator;return t&&(t=Array.isArray(this.value)?I(this.value,e.value):this.value===e.value),t}values(){return this.value.split(",")}validate(e){const{required:t,operator:n,value:i,type:s}=this;if(t&&/^\s*$/.test(e))return G(!1,"required");if(/^\s*$/.test(e))return[!0];if(q[s]&&!q[s].test(e))return G(!1,"notMatch");if("list"===s)return G(this.values().includes(e),"notIn");if(n){const t=this.parseValue(e);if("be"===n){const[e,n]=i;return G(t>=this.parseValue(e)&&t<=this.parseValue(n),"between",e,n)}if("nbe"===n){const[e,n]=i;return G(t<this.parseValue(e)||t>this.parseValue(n),"notBetween",e,n)}if("eq"===n)return G(t===this.parseValue(i),"equal",i);if("neq"===n)return G(t!==this.parseValue(i),"notEqual",i);if("lt"===n)return G(t<this.parseValue(i),"lessThan",i);if("lte"===n)return G(t<=this.parseValue(i),"lessThanEqual",i);if("gt"===n)return G(t>this.parseValue(i),"greaterThan",i);if("gte"===n)return G(t>=this.parseValue(i),"greaterThanEqual",i)}return[!0]}}class L{constructor(e,t,n){this.refs=t,this.mode=e,this.validator=n}includes(e,t){const{refs:n}=this;for(let i=0;i<n.length;i+=1)if(u.valueOf(n[i]).includes(e,t))return!0;return!1}addRef(e){this.remove(u.valueOf(e)),this.refs.push(e)}remove(e){const t=[];this.refs.forEach((n=>{const i=u.valueOf(n);i.intersects(e)?i.difference(e).forEach((e=>t.push(e.toString()))):t.push(n)})),this.refs=t}getData(){const{refs:e,mode:t,validator:n}=this,{type:i,required:s,operator:r,value:o}=n;return{refs:e,mode:t,type:i,required:s,operator:r,value:o}}static valueOf({refs:e,mode:t,type:n,required:i,operator:s,value:r}){return new L(t,e,new J(n,i,r,s))}}class _{constructor(){this._=[],this.errors=new Map}getError(e,t){return this.errors.get(`${e}_${t}`)}validate(e,t,n){const i=this.get(e,t),s=`${e}_${t}`,{errors:r}=this;if(null!==i){const[e,t]=i.validator.validate(n);e?r.delete(s):r.set(s,t)}else r.delete(s);return!0}add(e,t,{type:n,required:i,value:s,operator:r}){const o=new J(n,i,s,r),l=this.getByValidator(o);null!==l?l.addRef(t):this._.push(new L(e,[t],o))}getByValidator(e){for(let t=0;t<this._.length;t+=1){const n=this._[t];if(n.validator.equals(e))return n}return null}get(e,t){for(let n=0;n<this._.length;n+=1){const i=this._[n];if(i.includes(e,t))return i}return null}remove(e){this.each((t=>{t.remove(e)}))}each(e){this._.forEach((t=>e(t)))}getData(){return this._.filter((e=>e.refs.length>0)).map((e=>e.getData()))}setData(e){this._=e.map((e=>L.valueOf(e)))}}const j={mode:"edit",view:{height:()=>document.documentElement.clientHeight,width:()=>document.documentElement.clientWidth},showGrid:!0,showToolbar:!0,showContextmenu:!0,row:{len:100,height:25},col:{len:26,width:100,indexWidth:60,minWidth:60},style:{bgcolor:"#ffffff",align:"left",valign:"middle",textwrap:!1,strike:!1,underline:!1,color:"#0a0a0a",font:{name:"Arial",size:10,bold:!1,italic:!1},format:"normal"}};function P(e,t,n=(()=>{})){const{merges:i}=this,s=t.clone(),[r,o]=e.size(),[l,a]=t.size();return r>l&&(s.eri=t.sri+r-1),o>a&&(s.eci=t.sci+o-1),!i.intersects(s)||(n(H("error.pasteForMergedCell")),!1)}function V(e,t,n,i=!1){const{rows:s,merges:r}=this;"all"!==n&&"format"!==n||(s.deleteCells(t,n),r.deleteWithin(t)),s.copyPaste(e,t,n,i,((e,t,n)=>{if(n&&n.merge){const[i,s]=n.merge;if(i<=0&&s<=0)return;r.add(new u(e,t,e+i,t+s))}}))}function $(e,t){const{clipboard:n,rows:i,merges:s}=this;i.cutPaste(e,t),s.move(e,t.sri-e.sri,t.sci-e.sci),n.clear()}function K(e,t,n){const{styles:i,rows:s}=this,r=s.getCellOrNew(e,t);let o={};void 0!==r.style&&(o=z(i[r.style])),o=S(o,{border:n}),r.style=this.addStyle(o)}function Z({mode:e,style:t,color:n}){const{styles:i,selector:s,rows:r}=this,{sri:o,sci:l,eri:a,eci:h}=s.range,A=!this.isSignleSelected();if(A||"inside"!==e&&"horizontal"!==e&&"vertical"!==e)if("outside"!==e||A){if("none"===e)s.range.each(((e,t)=>{const n=r.getCell(e,t);if(n&&void 0!==n.style){const e=z(i[n.style]);delete e.border,n.style=this.addStyle(e)}}));else if("all"===e||"inside"===e||"outside"===e||"horizontal"===e||"vertical"===e){const i=[];for(let s=o;s<=a;s+=1)for(let c=l;c<=h;c+=1){const d=[];for(let e=0;e<i.length;e+=1){const[t,n,r,o]=i[e];if(s===t+r+1&&d.push(e),t<=s&&s<=t+r&&c===n){c+=o+1;break}}if(d.forEach((e=>i.splice(e,1))),c>h)break;const p=r.getCell(s,c);let[f,u]=[0,0];p&&p.merge&&([f,u]=p.merge,i.push([s,c,f,u]));const g=f>0&&s+f===a,x=u>0&&c+u===h;let m={};"all"===e?m={bottom:[t,n],top:[t,n],left:[t,n],right:[t,n]}:"inside"===e?(!x&&c<h&&(m.right=[t,n]),!g&&s<a&&(m.bottom=[t,n])):"horizontal"===e?!g&&s<a&&(m.bottom=[t,n]):"vertical"===e?!x&&c<h&&(m.right=[t,n]):"outside"===e&&A&&(o===s&&(m.top=[t,n]),(g||a===s)&&(m.bottom=[t,n]),l===c&&(m.left=[t,n]),(x||h===c)&&(m.right=[t,n])),Object.keys(m).length>0&&K.call(this,s,c,m),c+=u}}else if("top"===e||"bottom"===e)for(let i=l;i<=h;i+=1)"top"===e&&(K.call(this,o,i,{top:[t,n]}),i+=r.getCellMerge(o,i)[1]),"bottom"===e&&(K.call(this,a,i,{bottom:[t,n]}),i+=r.getCellMerge(a,i)[1]);else if("left"===e||"right"===e)for(let i=o;i<=a;i+=1)"left"===e&&(K.call(this,i,l,{left:[t,n]}),i+=r.getCellMerge(i,l)[0]),"right"===e&&(K.call(this,i,h,{right:[t,n]}),i+=r.getCellMerge(i,h)[0])}else K.call(this,o,l,{top:[t,n],bottom:[t,n],left:[t,n],right:[t,n]})}function X(e,t){const{rows:n}=this,i=this.freezeTotalHeight();let s=n.height;i+n.height<e&&(s-=t);const r=this.exceptRowSet;let o=0,l=s,{height:a}=n;for(;o<n.len&&!(l>e);o+=1)r.has(o)||(a=n.getHeight(o),l+=a);return l-=a,l<=0?{ri:-1,top:0,height:a}:{ri:o-1,top:l,height:a}}function Q(e,t){const{cols:n}=this,i=this.freezeTotalWidth();let s=n.indexWidth;i+n.indexWidth<e&&(s-=t);const[r,o,l]=D(0,n.len,s,n.indexWidth,e,(e=>n.getWidth(e)));return o<=0?{ci:-1,left:0,width:n.indexWidth}:{ci:r-1,left:o,width:l}}class ee{constructor(e,t){this.settings=S(j,t||{}),this.name=e||"sheet",this.freeze=[0,0],this.styles=[],this.merges=new v,this.rows=new T(this.settings.row),this.cols=new R(this.settings.col),this.validations=new _,this.hyperlinks={},this.comments={},this.selector=new g,this.scroll=new x,this.history=new m,this.clipboard=new b,this.autoFilter=new w,this.change=()=>{},this.exceptRowSet=new Set,this.sortedRowMap=new Map,this.unsortedRowMap=new Map}addValidation(e,t,n){this.changeData((()=>{this.validations.add(e,t,n)}))}removeValidation(){const{range:e}=this.selector;this.changeData((()=>{this.validations.remove(e)}))}getSelectedValidator(){const{ri:e,ci:t}=this.selector,n=this.validations.get(e,t);return n?n.validator:null}getSelectedValidation(){const{ri:e,ci:t,range:n}=this.selector,i=this.validations.get(e,t),s={ref:n.toString()};return null!==i&&(s.mode=i.mode,s.validator=i.validator),s}canUndo(){return this.history.canUndo()}canRedo(){return this.history.canRedo()}undo(){this.history.undo(this.getData(),(e=>{this.setData(e)}))}redo(){this.history.redo(this.getData(),(e=>{this.setData(e)}))}copy(){this.clipboard.copy(this.selector.range)}cut(){this.clipboard.cut(this.selector.range)}paste(e="all",t=(()=>{})){const{clipboard:n,selector:i}=this;return!n.isClear()&&!!P.call(this,n.range,i.range,t)&&(this.changeData((()=>{n.isCopy()?V.call(this,n.range,i.range,e):n.isCut()&&$.call(this,n.range,i.range)})),!0)}pasteFromText(e){const t=e.split("\r\n").map((e=>e.replace(/"/g,"").split("\t")));t.length>0&&(t.length-=1);const{rows:n,selector:i}=this;this.changeData((()=>{n.paste(t,i.range)}))}autofill(e,t,n=(()=>{})){const i=this.selector.range;return!!P.call(this,i,e,n)&&(this.changeData((()=>{V.call(this,i,e,t,!0)})),!0)}clearClipboard(){this.clipboard.clear()}calSelectedRangeByEnd(e,t){const{selector:n,rows:i,cols:s,merges:r}=this;let{sri:o,sci:l,eri:a,eci:h}=n.range;const A=n.ri,c=n.ci;let[d,p]=[e,t];return e<0&&(d=i.len-1),t<0&&(p=s.len-1),[o,a]=d>A?[A,d]:[d,A],[l,h]=p>c?[c,p]:[p,c],n.range=r.union(new u(o,l,a,h)),n.range=r.union(n.range),n.range}calSelectedRangeByStart(e,t){const{selector:n,rows:i,cols:s,merges:r}=this;let o=r.getFirstIncludes(e,t);return null===o&&(o=new u(e,t,e,t),-1===e&&(o.sri=0,o.eri=i.len-1),-1===t&&(o.sci=0,o.eci=s.len-1)),n.range=o,o}setSelectedCellAttr(e,t){this.changeData((()=>{const{selector:n,styles:i,rows:s}=this;if("merge"===e)t?this.merge():this.unmerge();else if("border"===e)Z.call(this,t);else if("formula"===e){const{ri:e,ci:i,range:r}=n;if(n.multiple()){const[i,o]=n.size(),{sri:l,sci:a,eri:h,eci:A}=r;if(i>1)for(let e=a;e<=A;e+=1)s.getCellOrNew(h+1,e).text=`=${t}(${p(e,l)}:${p(e,h)})`;else o>1&&(s.getCellOrNew(e,A+1).text=`=${t}(${p(a,e)}:${p(A,e)})`)}else s.getCellOrNew(e,i).text=`=${t}()`}else n.range.each(((n,r)=>{const o=s.getCellOrNew(n,r);let l={};if(void 0!==o.style&&(l=z(i[o.style])),"format"===e)l.format=t,o.style=this.addStyle(l);else if("font-bold"===e||"font-italic"===e||"font-name"===e||"font-size"===e){const n={};n[e.split("-")[1]]=t,l.font=Object.assign(l.font||{},n),o.style=this.addStyle(l)}else"strike"===e||"textwrap"===e||"underline"===e||"align"===e||"valign"===e||"color"===e||"bgcolor"===e?(l[e]=t,o.style=this.addStyle(l)):o[e]=t}))}))}setSelectedCellText(e,t="input"){const{autoFilter:n,selector:i,rows:s}=this,{ri:r,ci:o}=i;let l=r;this.unsortedRowMap.has(r)&&(l=this.unsortedRowMap.get(r));const a=s.getCell(l,o),h=a?a.text:"";if(this.setCellText(l,o,e,t),n.active()){const t=n.getFilter(o);if(t){const n=t.value.findIndex((e=>e===h));n>=0&&t.value.splice(n,1,e)}}}getSelectedCell(){const{ri:e,ci:t}=this.selector;let n=e;return this.unsortedRowMap.has(e)&&(n=this.unsortedRowMap.get(e)),this.rows.getCell(n,t)}xyInSelectedRect(e,t){const{left:n,top:i,width:s,height:r}=this.getSelectedRect(),o=e-this.cols.indexWidth,l=t-this.rows.height;return o>n&&o<n+s&&l>i&&l<i+r}getSelectedRect(){return this.getRect(this.selector.range)}getClipboardRect(){const{clipboard:e}=this;return e.isClear()?{left:-100,top:-100}:this.getRect(e.range)}getRect(e){const{scroll:t,rows:n,cols:i,exceptRowSet:s}=this,{sri:r,sci:o,eri:l,eci:a}=e;if(r<0&&o<0)return{left:0,l:0,top:0,t:0,scroll:t};const h=i.sumWidth(0,o),A=n.sumHeight(0,r,s),c=n.sumHeight(r,l+1,s),d=i.sumWidth(o,a+1);let p=h-t.x,f=A-t.y;const u=this.freezeTotalHeight(),g=this.freezeTotalWidth();return g>0&&g>h&&(p=h),u>0&&u>A&&(f=A),{l:h,t:A,left:p,top:f,height:c,width:d,scroll:t}}getCellRectByXY(e,t){const{scroll:n,merges:i,rows:s,cols:r}=this;let{ri:o,top:l,height:a}=X.call(this,t,n.y),{ci:h,left:A,width:c}=Q.call(this,e,n.x);if(-1===h&&(c=r.totalWidth()),-1===o&&(a=s.totalHeight()),o>=0||h>=0){const e=i.getFirstIncludes(o,h);e&&(o=e.sri,h=e.sci,({left:A,top:l,width:c,height:a}=this.cellRect(o,h)))}return{ri:o,ci:h,left:A,top:l,width:c,height:a}}isSignleSelected(){const{sri:e,sci:t,eri:n,eci:i}=this.selector.range,s=this.getCell(e,t);if(s&&s.merge){const[r,o]=s.merge;if(e+r===n&&t+o===i)return!0}return!this.selector.multiple()}canUnmerge(){const{sri:e,sci:t,eri:n,eci:i}=this.selector.range,s=this.getCell(e,t);if(s&&s.merge){const[r,o]=s.merge;if(e+r===n&&t+o===i)return!0}return!1}merge(){const{selector:e,rows:t}=this;if(this.isSignleSelected())return;const[n,i]=e.size();if(n>1||i>1){const{sri:s,sci:r}=e.range;this.changeData((()=>{const o=t.getCellOrNew(s,r);o.merge=[n-1,i-1],this.merges.add(e.range),this.rows.deleteCells(e.range),this.rows.setCell(s,r,o)}))}}unmerge(){const{selector:e}=this;if(!this.isSignleSelected())return;const{sri:t,sci:n}=e.range;this.changeData((()=>{this.rows.deleteCell(t,n,"merge"),this.merges.deleteWithin(e.range)}))}canAutofilter(){return!this.autoFilter.active()}autofilter(){const{autoFilter:e,selector:t}=this;this.changeData((()=>{e.active()?(e.clear(),this.exceptRowSet=new Set,this.sortedRowMap=new Map,this.unsortedRowMap=new Map):e.ref=t.range.toString()}))}setAutoFilter(e,t,n,i){const{autoFilter:s}=this;s.addFilter(e,n,i),s.setSort(e,t),this.resetAutoFilter()}resetAutoFilter(){const{autoFilter:e,rows:t}=this;if(!e.active())return;const{sort:n}=e,{rset:i,fset:s}=e.filteredRows(((e,n)=>t.getCell(e,n))),r=Array.from(s),o=Array.from(s);n&&r.sort(((e,t)=>"asc"===n.order?e-t:"desc"===n.order?t-e:0)),this.exceptRowSet=i,this.sortedRowMap=new Map,this.unsortedRowMap=new Map,r.forEach(((e,t)=>{this.sortedRowMap.set(o[t],e),this.unsortedRowMap.set(e,o[t])}))}deleteCell(e="all"){const{selector:t}=this;this.changeData((()=>{this.rows.deleteCells(t.range,e),"all"!==e&&"format"!==e||this.merges.deleteWithin(t.range)}))}insert(e,t=1){this.changeData((()=>{const{sri:n,sci:i}=this.selector.range,{rows:s,merges:r,cols:o}=this;let l=n;"row"===e?s.insert(n,t):"column"===e&&(s.insertColumn(i,t),l=i,o.len+=1),r.shift(e,l,t,((e,t,n,i)=>{const r=s.getCell(e,t);r.merge[0]+=n,r.merge[1]+=i}))}))}delete(e){this.changeData((()=>{const{rows:t,merges:n,selector:i,cols:s}=this,{range:r}=i,{sri:o,sci:l,eri:a,eci:h}=i.range,[A,c]=i.range.size();let d=o,p=A;"row"===e?t.delete(o,a):"column"===e&&(t.deleteColumn(l,h),d=r.sci,p=c,s.len-=1),n.shift(e,d,-p,((e,n,i,s)=>{const r=t.getCell(e,n);r.merge[0]+=i,r.merge[1]+=s,0===r.merge[0]&&0===r.merge[1]&&delete r.merge}))}))}scrollx(e,t){const{scroll:n,freeze:i,cols:s}=this,[,r]=i,[o,l,a]=D(r,s.len,0,0,e,(e=>s.getWidth(e)));let h=l;e>0&&(h+=a),n.x!==h&&(n.ci=e>0?o:0,n.x=h,t())}scrolly(e,t){const{scroll:n,freeze:i,rows:s}=this,[r]=i,[o,l,a]=D(r,s.len,0,0,e,(e=>s.getHeight(e)));let h=l;e>0&&(h+=a),n.y!==h&&(n.ri=e>0?o:0,n.y=h,t())}cellRect(e,t){const{rows:n,cols:i}=this,s=i.sumWidth(0,t),r=n.sumHeight(0,e),o=n.getCell(e,t);let l=i.getWidth(t),a=n.getHeight(e);if(null!==o&&o.merge){const[s,r]=o.merge;if(s>0)for(let t=1;t<=s;t+=1)a+=n.getHeight(e+t);if(r>0)for(let e=1;e<=r;e+=1)l+=i.getWidth(t+e)}return{left:s,top:r,width:l,height:a,cell:o}}getCell(e,t){return this.rows.getCell(e,t)}getCellTextOrDefault(e,t){const n=this.getCell(e,t);return n&&n.text?n.text:""}getCellStyle(e,t){const n=this.getCell(e,t);return n&&void 0!==n.style?this.styles[n.style]:null}getCellStyleOrDefault(e,t){const{styles:n,rows:i}=this,s=i.getCell(e,t),r=s&&void 0!==s.style?n[s.style]:{};return S(this.defaultStyle(),r)}getSelectedCellStyle(){const{ri:e,ci:t}=this.selector;return this.getCellStyleOrDefault(e,t)}setCellText(e,t,n,i){const{rows:s,history:r,validations:o}=this;"finished"===i?(s.setCellText(e,t,""),r.add(this.getData()),s.setCellText(e,t,n)):(s.setCellText(e,t,n),this.change(this.getData())),o.validate(e,t,n)}freezeIsActive(){const[e,t]=this.freeze;return e>0||t>0}setFreeze(e,t){this.changeData((()=>{this.freeze=[e,t]}))}freezeTotalWidth(){return this.cols.sumWidth(0,this.freeze[1])}freezeTotalHeight(){return this.rows.sumHeight(0,this.freeze[0])}setRowHeight(e,t){this.changeData((()=>{this.rows.setHeight(e,t)}))}setColWidth(e,t){this.changeData((()=>{this.cols.setWidth(e,t)}))}viewHeight(){const{view:e,showToolbar:t}=this.settings;let n=e.height();return n-=41,t&&(n-=41),n}viewWidth(){return this.settings.view.width()}freezeViewRange(){const[e,t]=this.freeze;return new u(0,0,e-1,t-1,this.freezeTotalWidth(),this.freezeTotalHeight())}contentRange(){const{rows:e,cols:t}=this,[n,i]=e.maxCell(),s=e.sumHeight(0,n+1),r=t.sumWidth(0,i+1);return new u(0,0,n,i,r,s)}exceptRowTotalHeight(e,t){const{exceptRowSet:n,rows:i}=this,s=Array.from(n);let r=0;return s.forEach((n=>{if(n<e||n>t){const e=i.getHeight(n);r+=e}})),r}viewRange(){const{scroll:e,rows:t,cols:n,freeze:i,exceptRowSet:s}=this;let{ri:r,ci:o}=e;r<=0&&([r]=i),o<=0&&([,o]=i);let[l,a]=[0,0],[h,A]=[t.len,n.len];for(let e=r;e<t.len&&(s.has(e)||(a+=t.getHeight(e),h=e),!(a>this.viewHeight()));e+=1);for(let e=o;e<n.len&&(l+=n.getWidth(e),A=e,!(l>this.viewWidth()));e+=1);return new u(r,o,h,A,l,a)}eachMergesInView(e,t){this.merges.filterIntersects(e).forEach((e=>t(e)))}hideRowsOrCols(){const{rows:e,cols:t,selector:n}=this,[i,s]=n.size(),{sri:r,sci:o,eri:l,eci:a}=n.range;if(i===e.len)for(let e=o;e<=a;e+=1)t.setHide(e,!0);else if(s===t.len)for(let t=r;t<=l;t+=1)e.setHide(t,!0)}unhideRowsOrCols(e,t){this[e+"s"].unhide(t)}rowEach(e,t,n){let i=0;const{rows:s}=this,r=this.exceptRowSet,o=[...r];let l=0;for(let t=0;t<o.length;t+=1)o[t]<e&&(l+=1);for(let o=e+l;o<=t+l;o+=1)if(r.has(o))l+=1;else{const e=s.getHeight(o);if(e>0&&(n(o,i,e),i+=e,i>this.viewHeight()))break}}colEach(e,t,n){let i=0;const{cols:s}=this;for(let r=e;r<=t;r+=1){const e=s.getWidth(r);if(e>0&&(n(r,i,e),i+=e,i>this.viewWidth()))break}}defaultStyle(){return this.settings.style}addStyle(e){const{styles:t}=this;for(let n=0;n<t.length;n+=1){const i=t[n];if(M(i,e))return n}return t.push(e),t.length-1}changeData(e){this.history.add(this.getData()),e(),this.change(this.getData())}setData(e){return Object.keys(e).forEach((t=>{if("merges"===t||"rows"===t||"cols"===t||"validations"===t)this[t].setData(e[t]);else if("freeze"===t){const[n,i]=d(e[t]);this.freeze=[i,n]}else"autofilter"===t?this.autoFilter.setData(e[t]):void 0!==e[t]&&(this[t]=e[t])})),this}getData(){const{name:e,freeze:t,styles:n,merges:i,rows:s,cols:r,validations:o,autoFilter:l}=this;return{name:e,freeze:p(t[1],t[0]),styles:n,merges:i.getData(),rows:s.getData(),cols:r.getData(),validations:o.getData(),autofilter:l.getData()}}}function te(e,t,n){e.addEventListener(t,n)}function ne(e,t,n){e.removeEventListener(t,n)}function ie(e){e.xclickoutside&&(ne(window.document.body,"click",e.xclickoutside),delete e.xclickoutside)}function se(e,t){e.xclickoutside=n=>{2===n.detail||e.contains(n.target)||(t?t(e):(e.hide(),ie(e)))},te(window.document.body,"click",e.xclickoutside)}function re(e,t,n){te(e,"mousemove",t),e.xEvtUp=i=>{ne(e,"mousemove",t),ne(e,"mouseup",e.xEvtUp),n(i)},te(e,"mouseup",e.xEvtUp)}function oe(e,t,n,i){let s="";Math.abs(e)>Math.abs(t)?(s=e>0?"right":"left",i(s,e,n)):(s=t>0?"down":"up",i(s,t,n))}window.devicePixelRatio;class le{constructor(e=!1,t){this.moving=!1,this.vertical=e,this.el=a("div","x-spreadsheet-resizer "+(e?"vertical":"horizontal")).children(this.unhideHoverEl=a("div","x-spreadsheet-resizer-hover").on("dblclick.stop",(e=>this.mousedblclickHandler(e))).css("position","absolute").hide(),this.hoverEl=a("div","x-spreadsheet-resizer-hover").on("mousedown.stop",(e=>this.mousedownHandler(e))),this.lineEl=a("div","x-spreadsheet-resizer-line").hide()).hide(),this.cRect=null,this.finishedFn=null,this.minDistance=t,this.unhideFn=()=>{}}showUnhide(e){this.unhideIndex=e,this.unhideHoverEl.show()}hideUnhide(){this.unhideHoverEl.hide()}show(e,t){const{moving:n,vertical:i,hoverEl:s,lineEl:r,el:o,unhideHoverEl:l}=this;if(n)return;this.cRect=e;const{left:a,top:h,width:A,height:c}=e;o.offset({left:i?a+A-5:a,top:i?h:h+c-5}).show(),s.offset({width:i?5:A,height:i?c:5}),r.offset({width:i?0:t.width,height:i?t.height:0}),l.offset({left:i?5-A:a,top:i?h:5-c,width:i?5:A,height:i?c:5})}hide(){this.el.offset({left:0,top:0}).hide(),this.hideUnhide()}mousedblclickHandler(){this.unhideIndex&&this.unhideFn(this.unhideIndex)}mousedownHandler(e){let t=e;const{el:n,lineEl:i,cRect:s,vertical:r,minDistance:o}=this;let l=r?s.width:s.height;i.show(),re(window,(e=>{this.moving=!0,null!==t&&1===e.buttons&&(r?(l+=e.movementX,l>o&&n.css("left",s.left+l+"px")):(l+=e.movementY,l>o&&n.css("top",s.top+l+"px")),t=e)}),(()=>{t=null,i.hide(),this.moving=!1,this.hide(),this.finishedFn&&(l<o&&(l=o),this.finishedFn(s,l))}))}}class ae{constructor(e){this.vertical=e,this.moveFn=null,this.el=a("div","x-spreadsheet-scrollbar "+(e?"vertical":"horizontal")).child(this.contentEl=a("div","")).on("mousemove.stop",(()=>{})).on("scroll.stop",(e=>{const{scrollTop:t,scrollLeft:n}=e.target;this.moveFn&&this.moveFn(this.vertical?t:n,e)}))}move(e){return this.el.scroll(e),this}scroll(){return this.el.scroll()}set(e,t){const n=e-1;if(t>n){const e=this.vertical?"height":"width";this.el.css(e,n-15+"px").show(),this.contentEl.css(this.vertical?"width":"height","1px").css(e,t+"px")}else this.el.hide();return this}}let he=10;class Ae{constructor(e=!1){this.useHideInput=e,this.inputChange=()=>{},this.cornerEl=a("div","x-spreadsheet-selector-corner"),this.areaEl=a("div","x-spreadsheet-selector-area").child(this.cornerEl).hide(),this.clipboardEl=a("div","x-spreadsheet-selector-clipboard").hide(),this.autofillEl=a("div","x-spreadsheet-selector-autofill").hide(),this.el=a("div","x-spreadsheet-selector").css("z-index",""+he).children(this.areaEl,this.clipboardEl,this.autofillEl).hide(),e&&(this.hideInput=a("input","").on("compositionend",(e=>{this.inputChange(e.target.value)})),this.el.child(this.hideInputDiv=a("div","hide-input").child(this.hideInput)),this.el.child(this.hideInputDiv=a("div","hide-input").child(this.hideInput))),he+=1}setOffset(e){return this.el.offset(e).show(),this}hide(){return this.el.hide(),this}setAreaOffset(e){const{left:t,top:n,width:i,height:s}=e,r={width:i-3+.8,height:s-3+.8,left:t-.8,top:n-.8};this.areaEl.offset(r).show(),this.useHideInput&&(this.hideInputDiv.offset(r),this.hideInput.val("").focus())}setClipboardOffset(e){const{left:t,top:n,width:i,height:s}=e;this.clipboardEl.offset({left:t,top:n,width:i-5,height:s-5})}showAutofill(e){const{left:t,top:n,width:i,height:s}=e;this.autofillEl.offset({width:i-3,height:s-3,left:t,top:n}).show()}hideAutofill(){this.autofillEl.hide()}showClipboard(){this.clipboardEl.show()}hideClipboard(){this.clipboardEl.hide()}}function ce(e){const{data:t}=this,{left:n,top:i,width:s,height:r,scroll:o,l,t:a}=e,h=t.freezeTotalWidth(),A=t.freezeTotalHeight();let c=n-h;h>l&&(c-=o.x);let d=i-A;return A>a&&(d-=o.y),{left:c,top:d,width:s,height:r}}function de(e){const{data:t}=this,{left:n,width:i,height:s,l:r,t:o,scroll:l}=e,a=t.freezeTotalWidth();let h=n-a;return a>r&&(h-=l.x),{left:h,top:o,width:i,height:s}}function pe(e){const{data:t}=this,{top:n,width:i,height:s,l:r,t:o,scroll:l}=e,a=t.freezeTotalHeight();let h=n-a;return a>o&&(h-=l.y),{left:r,top:h,width:i,height:s}}function fe(e){const{br:t}=this;t.setAreaOffset(ce.call(this,e))}function ue(e){const{tl:t}=this;t.setAreaOffset(e)}function ge(e){const{t}=this;t.setAreaOffset(de.call(this,e))}function xe(e){const{l:t}=this;t.setAreaOffset(pe.call(this,e))}function me(e){const{l:t}=this;t.setClipboardOffset(pe.call(this,e))}function be(e){const{br:t}=this;t.setClipboardOffset(ce.call(this,e))}function Ee(e){const{tl:t}=this;t.setClipboardOffset(e)}function Ce(e){const{t}=this;t.setClipboardOffset(de.call(this,e))}function we(e){fe.call(this,e),ue.call(this,e),ge.call(this,e),xe.call(this,e)}function ve(e){be.call(this,e),Ee.call(this,e),Ce.call(this,e),me.call(this,e)}class ye{constructor(e){this.inputChange=()=>{},this.data=e,this.br=new Ae(!0),this.t=new Ae,this.l=new Ae,this.tl=new Ae,this.br.inputChange=e=>{this.inputChange(e)},this.br.el.show(),this.offset=null,this.areaOffset=null,this.indexes=null,this.range=null,this.arange=null,this.el=a("div","x-spreadsheet-selectors").children(this.tl.el,this.t.el,this.l.el,this.br.el).hide(),this.lastri=-1,this.lastci=-1,he+=1}resetData(e){this.data=e,this.range=e.selector.range,this.resetAreaOffset()}hide(){this.el.hide()}resetOffset(){const{data:e,tl:t,t:n,l:i,br:s}=this,r=e.freezeTotalHeight(),o=e.freezeTotalWidth();r>0||o>0?(t.setOffset({width:o,height:r}),n.setOffset({left:o,height:r}),i.setOffset({top:r,width:o}),s.setOffset({left:o,top:r})):(t.hide(),n.hide(),i.hide(),s.setOffset({left:0,top:0}))}resetAreaOffset(){const e=this.data.getSelectedRect(),t=this.data.getClipboardRect();we.call(this,e),ve.call(this,t),this.resetOffset()}resetBRTAreaOffset(){const e=this.data.getSelectedRect(),t=this.data.getClipboardRect();fe.call(this,e),ge.call(this,e),be.call(this,t),Ce.call(this,t),this.resetOffset()}resetBRLAreaOffset(){const e=this.data.getSelectedRect(),t=this.data.getClipboardRect();fe.call(this,e),xe.call(this,e),be.call(this,t),me.call(this,t),this.resetOffset()}set(e,t,n=!0){const{data:i}=this,s=i.calSelectedRangeByStart(e,t),{sri:r,sci:o}=s;if(n){let[n,s]=[e,t];e<0&&(n=0),t<0&&(s=0),i.selector.setIndexes(n,s),this.indexes=[n,s]}this.moveIndexes=[r,o],this.range=s,this.resetAreaOffset(),this.el.show()}setEnd(e,t,n=!0){const{data:i,lastri:s,lastci:r}=this;if(n){if(e===s&&t===r)return;this.lastri=e,this.lastci=t}this.range=i.calSelectedRangeByEnd(e,t),we.call(this,this.data.getSelectedRect())}reset(){const{eri:e,eci:t}=this.data.selector.range;this.setEnd(e,t)}showAutofill(e,t){if(-1===e&&-1===t)return;const{sri:n,sci:i,eri:s,eci:r}=this.range,[o,l]=[e,t],a=n-e,h=s-e,A=r-t;if(i-t>0)this.arange=new u(n,l,s,i-1);else if(a>0)this.arange=new u(o,i,n-1,r);else if(A<0)this.arange=new u(n,r+1,s,l);else{if(!(h<0))return void(this.arange=null);this.arange=new u(s+1,i,o,r)}if(null!==this.arange){const e=this.data.getRect(this.arange);e.width+=2,e.height+=2;const{br:t,l:n,t:i,tl:s}=this;t.showAutofill(ce.call(this,e)),n.showAutofill(pe.call(this,e)),i.showAutofill(de.call(this,e)),s.showAutofill(e)}}hideAutofill(){["br","l","t","tl"].forEach((e=>{this[e].hideAutofill()}))}showClipboard(){const e=this.data.getClipboardRect();ve.call(this,e),["br","l","t","tl"].forEach((e=>{this[e].showClipboard()}))}hideClipboard(){["br","l","t","tl"].forEach((e=>{this[e].hideClipboard()}))}}function ke(e){e.preventDefault(),e.stopPropagation();const{filterItems:t}=this;t.length<=0||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex-=1,this.itemIndex<0&&(this.itemIndex=t.length-1),t[this.itemIndex].toggle())}function Be(e){e.stopPropagation();const{filterItems:t}=this;t.length<=0||(this.itemIndex>=0&&t[this.itemIndex].toggle(),this.itemIndex+=1,this.itemIndex>t.length-1&&(this.itemIndex=0),t[this.itemIndex].toggle())}function ze(e){e.preventDefault();const{filterItems:t}=this;t.length<=0||(e.stopPropagation(),this.itemIndex<0&&(this.itemIndex=0),t[this.itemIndex].el.click(),this.hide())}function Se(e){const{keyCode:t}=e;switch(e.ctrlKey&&e.stopPropagation(),t){case 37:e.stopPropagation();break;case 38:ke.call(this,e);break;case 39:e.stopPropagation();break;case 40:Be.call(this,e);break;case 13:case 9:ze.call(this,e);break;default:e.stopPropagation()}}class Me{constructor(e,t,n="200px"){this.filterItems=[],this.items=e,this.el=a("div","x-spreadsheet-suggest").css("width",n).hide(),this.itemClick=t,this.itemIndex=-1}setOffset(e){this.el.cssRemoveKeys("top","bottom").offset(e)}hide(){const{el:e}=this;this.filterItems=[],this.itemIndex=-1,e.hide(),ie(this.el.parent())}setItems(e){this.items=e}search(e){let{items:t}=this;if(/^\s*$/.test(e)||(t=t.filter((t=>(t.key||t).startsWith(e.toUpperCase())))),t=t.map((e=>{let{title:t}=e;t?"function"==typeof t&&(t=t()):t=e;const n=a("div","x-spreadsheet-item").child(t).on("click.stop",(()=>{this.itemClick(e),this.hide()}));return e.label&&n.child(a("div","label").html(e.label)),n})),this.filterItems=t,t.length<=0)return;const{el:n}=this;n.html("").children(...t).show(),se(n.parent(),(()=>{this.hide()}))}bindInputEvents(e){e.on("keydown",(e=>Se.call(this,e)))}}class Ie extends l{constructor(e){super("div","x-spreadsheet-icon"),this.iconNameEl=a("div","x-spreadsheet-icon-img "+e),this.child(this.iconNameEl)}setName(e){this.iconNameEl.className("x-spreadsheet-icon-img "+e)}}function Ne(e,t){e.setMonth(e.getMonth()+t)}function De(e,t){const n=new Date(e);return n.setDate(t-e.getDay()+1),n}class Te{constructor(e){this.value=e,this.cvalue=new Date(e),this.headerLeftEl=a("div","calendar-header-left"),this.bodyEl=a("tbody",""),this.buildAll(),this.el=a("div","x-spreadsheet-calendar").children(a("div","calendar-header").children(this.headerLeftEl,a("div","calendar-header-right").children(a("a","calendar-prev").on("click.stop",(()=>this.prev())).child(new Ie("chevron-left")),a("a","calendar-next").on("click.stop",(()=>this.next())).child(new Ie("chevron-right")))),a("table","calendar-body").children(a("thead","").child(a("tr","").children(...H("calendar.weeks").map((e=>a("th","cell").child(e))))),this.bodyEl)),this.selectChange=()=>{}}setValue(e){this.value=e,this.cvalue=new Date(e),this.buildAll()}prev(){const{value:e}=this;Ne(e,-1),this.buildAll()}next(){const{value:e}=this;Ne(e,1),this.buildAll()}buildAll(){this.buildHeaderLeft(),this.buildBody()}buildHeaderLeft(){const{value:e}=this;this.headerLeftEl.html(`${H("calendar.months")[e.getMonth()]} ${e.getFullYear()}`)}buildBody(){const{value:e,cvalue:t,bodyEl:n}=this,i=function(e,t,n){const i=new Date(e,t,1,23,59,59),s=[[],[],[],[],[],[]];for(let e=0;e<6;e+=1)for(let r=0;r<7;r+=1){const o=De(i,7*e+r),l=o.getMonth()!==t,a=o.getMonth()===n.getMonth()&&o.getDate()===n.getDate();s[e][r]={d:o,disabled:l,active:a}}return s}(e.getFullYear(),e.getMonth(),t).map((e=>{const t=e.map((e=>{let t="cell";return e.disabled&&(t+=" disabled"),e.active&&(t+=" active"),a("td","").child(a("div",t).on("click.stop",(()=>{this.selectChange(e.d)})).child(e.d.getDate().toString()))}));return a("tr","").children(...t)}));n.html("").children(...i)}}class Re{constructor(){this.calendar=new Te(new Date),this.el=a("div","x-spreadsheet-datepicker").child(this.calendar.el).hide()}setValue(e){const{calendar:t}=this;return"string"==typeof e?/^\d{4}-\d{1,2}-\d{1,2}$/.test(e)&&t.setValue(new Date(e.replace(new RegExp("-","g"),"/"))):e instanceof Date&&t.setValue(e),this}change(e){this.calendar.selectChange=t=>{e(t),this.hide()}}show(){this.el.show()}hide(){this.el.hide()}}function Oe(){const{inputText:e}=this;if(!/^\s*$/.test(e)){const{textlineEl:t,textEl:n,areaOffset:i}=this,s=e.split("\n"),r=Math.max(...s.map((e=>e.length))),o=t.offset().width/e.length,l=(r+1)*o+5,a=this.viewFn().width-i.left-o;let h=s.length;if(l>i.width){let e=l;l>a&&(e=a,h+=parseInt(l/a,10),h+=l%a>0?1:0),n.css("width",e+"px")}h*=this.rowHeight,h>i.height&&n.css("height",h+"px")}}function Fe({target:e},t){const{value:n,selectionEnd:i}=e,s=`${n.slice(0,i)}${t}${n.slice(i)}`;e.value=s,e.setSelectionRange(i+1,i+1),this.inputText=s,this.textlineEl.html(s),Oe.call(this)}function We(e){const{keyCode:t,altKey:n}=e;13!==t&&9!==t&&e.stopPropagation(),13===t&&n&&(Fe.call(this,e,"\n"),e.stopPropagation()),13!==t||n||e.preventDefault()}function He(e){const t=e.target.value,{suggest:n,textlineEl:i,validator:s}=this,{cell:r}=this;if(null!==r)if("editable"in r&&!0===r.editable||void 0===r.editable){if(this.inputText=t,s)"list"===s.type?n.search(t):n.hide();else{const e=t.lastIndexOf("=");-1!==e?n.search(t.substring(e+1)):n.hide()}i.html(t),Oe.call(this),this.change("input",t)}else e.target.value="";else{if(this.inputText=t,s)"list"===s.type?n.search(t):n.hide();else{const e=t.lastIndexOf("=");-1!==e?n.search(t.substring(e+1)):n.hide()}i.html(t),Oe.call(this),this.change("input",t)}}function Ye(e){const{el:t}=this.textEl;setTimeout((()=>{t.focus(),t.setSelectionRange(e,e)}),0)}function Ue(e,t){const{textEl:n,textlineEl:i}=this;n.el.blur(),n.val(e),i.html(e),Ye.call(this,t)}function qe(e){const{inputText:t,validator:n}=this;let i=0;if(n&&"list"===n.type)this.inputText=e,i=this.inputText.length;else{const n=t.lastIndexOf("="),s=t.substring(0,n+1);let r=t.substring(n+1);r=-1!==r.indexOf(")")?r.substring(r.indexOf(")")):"",this.inputText=s+e.key+"(",i=this.inputText.length,this.inputText+=")"+r}Ue.call(this,this.inputText,i)}function Ge(){this.suggest.setItems(this.formulas)}class Je{constructor(e,t,n){this.viewFn=t,this.rowHeight=n,this.formulas=e,this.suggest=new Me(e,(e=>{qe.call(this,e)})),this.datepicker=new Re,this.datepicker.change((e=>{this.setText(function(e){let t=e.getMonth()+1,n=e.getDate();return t<10&&(t="0"+t),n<10&&(n="0"+n),`${e.getFullYear()}-${t}-${n}`}(e)),this.clear()})),this.areaEl=a("div","x-spreadsheet-editor-area").children(this.textEl=a("textarea","").on("input",(e=>He.call(this,e))).on("paste.stop",(()=>{})).on("keydown",(e=>We.call(this,e))),this.textlineEl=a("div","textline"),this.suggest.el,this.datepicker.el).on("mousemove.stop",(()=>{})).on("mousedown.stop",(()=>{})),this.el=a("div","x-spreadsheet-editor").child(this.areaEl).hide(),this.suggest.bindInputEvents(this.textEl),this.areaOffset=null,this.freeze={w:0,h:0},this.cell=null,this.inputText="",this.change=()=>{}}setFreezeLengths(e,t){this.freeze.w=e,this.freeze.h=t}clear(){""!==this.inputText&&this.change("finished",this.inputText),this.cell=null,this.areaOffset=null,this.inputText="",this.el.hide(),this.textEl.val(""),this.textlineEl.html(""),Ge.call(this),this.datepicker.hide()}setOffset(e,t="top"){const{textEl:n,areaEl:i,suggest:s,freeze:r,el:o}=this;if(e){this.areaOffset=e;const{left:l,top:a,width:h,height:A,l:c,t:d}=e,p={left:0,top:0};r.w>c&&r.h>d||(r.w<c&&r.h<d?(p.left=r.w,p.top=r.h):r.w>c?p.top=r.h:r.h>d&&(p.left=r.w)),o.offset(p),i.offset({left:l-p.left-.8,top:a-p.top-.8}),n.offset({width:h-9+.8,height:A-3+.8});const f={left:0};f[t]=A,s.setOffset(f),s.hide()}}setCell(e,t){const{el:n,datepicker:i,suggest:s}=this;n.show(),this.cell=e;const r=e&&e.text||"";if(this.setText(r),this.validator=t,t){const{type:e}=t;"date"===e&&(i.show(),/^\s*$/.test(r)||i.setValue(r)),"list"===e&&(s.setItems(t.values()),s.search(""))}}setText(e){this.inputText=e,Ue.call(this,e,e.length),Oe.call(this)}}class Le extends l{constructor(e,t=""){super("div","x-spreadsheet-button "+t),this.child(H("button."+e))}}function _e(){return window.devicePixelRatio||1}function je(){return _e()-.5}function Pe(e){return parseInt(e*_e(),10)}function Ve(e){const t=Pe(e);return t>0?t-.5:.5}class $e{constructor(e,t,n,i,s=0){this.x=e,this.y=t,this.width=n,this.height=i,this.padding=s,this.bgcolor="#ffffff",this.borderTop=null,this.borderRight=null,this.borderBottom=null,this.borderLeft=null}setBorders({top:e,bottom:t,left:n,right:i}){e&&(this.borderTop=e),i&&(this.borderRight=i),t&&(this.borderBottom=t),n&&(this.borderLeft=n)}innerWidth(){return this.width-2*this.padding-2}innerHeight(){return this.height-2*this.padding-2}textx(e){const{width:t,padding:n}=this;let{x:i}=this;return"left"===e?i+=n:"center"===e?i+=t/2:"right"===e&&(i+=t-n),i}texty(e,t){const{height:n,padding:i}=this;let{y:s}=this;return"top"===e?s+=i:"middle"===e?s+=n/2-t/2:"bottom"===e&&(s+=n-i-t),s}topxys(){const{x:e,y:t,width:n}=this;return[[e,t],[e+n,t]]}rightxys(){const{x:e,y:t,width:n,height:i}=this;return[[e+n,t],[e+n,t+i]]}bottomxys(){const{x:e,y:t,width:n,height:i}=this;return[[e,t+i],[e+n,t+i]]}leftxys(){const{x:e,y:t,height:n}=this;return[[e,t],[e,t+n]]}}function Ke(e,t,n,i,s,r,o){const l={x:0,y:0};"underline"===e?l.y="bottom"===s?0:"top"===s?-(r+2):-r/2:"strike"===e&&("bottom"===s?l.y=r/2:"top"===s&&(l.y=-(r/2+2))),"center"===i?l.x=o/2:"right"===i&&(l.x=o),this.line([t-l.x,n-l.y],[t-l.x+o,n-l.y])}class Ze{constructor(e,t,n){this.el=e,this.ctx=e.getContext("2d"),this.resize(t,n),this.ctx.scale(_e(),_e())}resize(e,t){this.el.style.width=e+"px",this.el.style.height=t+"px",this.el.width=Pe(e),this.el.height=Pe(t)}clear(){const{width:e,height:t}=this.el;return this.ctx.clearRect(0,0,e,t),this}attr(e){return Object.assign(this.ctx,e),this}save(){return this.ctx.save(),this.ctx.beginPath(),this}restore(){return this.ctx.restore(),this}beginPath(){return this.ctx.beginPath(),this}translate(e,t){return this.ctx.translate(Pe(e),Pe(t)),this}scale(e,t){return this.ctx.scale(e,t),this}clearRect(e,t,n,i){return this.ctx.clearRect(e,t,n,i),this}fillRect(e,t,n,i){return this.ctx.fillRect(Pe(e)-.5,Pe(t)-.5,Pe(n),Pe(i)),this}fillText(e,t,n){return this.ctx.fillText(e,Pe(t),Pe(n)),this}text(e,t,n={},i=!0){const{ctx:s}=this,{align:r,valign:o,font:l,color:a,strike:h,underline:A}=n,c=t.textx(r);s.save(),s.beginPath(),this.attr({textAlign:r,textBaseline:o,font:`${l.italic?"italic":""} ${l.bold?"bold":""} ${Pe(l.size)}px ${l.name}`,fillStyle:a,strokeStyle:a});const d=(""+e).split("\n"),p=t.innerWidth(),f=[];d.forEach((e=>{const t=s.measureText(e).width;if(i&&t>Pe(p)){let t={w:0,len:0,start:0};for(let n=0;n<e.length;n+=1)t.w>=Pe(p)&&(f.push(e.substr(t.start,t.len)),t={w:0,len:0,start:n}),t.len+=1,t.w+=s.measureText(e[n]).width+1;t.len>0&&f.push(e.substr(t.start,t.len))}else f.push(e)}));const u=(f.length-1)*(l.size+2);let g=t.texty(o,u);return f.forEach((e=>{const t=s.measureText(e).width;this.fillText(e,c,g),h&&Ke.call(this,"strike",c,g,r,o,l.size,t),A&&Ke.call(this,"underline",c,g,r,o,l.size,t),g+=l.size+2})),s.restore(),this}border(e,t){const{ctx:n}=this;return n.lineWidth=je,n.strokeStyle=t,"medium"===e?n.lineWidth=Pe(2)-.5:"thick"===e?n.lineWidth=Pe(3):"dashed"===e?n.setLineDash([Pe(3),Pe(2)]):"dotted"===e?n.setLineDash([Pe(1),Pe(1)]):"double"===e&&n.setLineDash([Pe(2),0]),this}line(...e){const{ctx:t}=this;if(e.length>1){t.beginPath();const[n,i]=e[0];t.moveTo(Ve(n),Ve(i));for(let n=1;n<e.length;n+=1){const[i,s]=e[n];t.lineTo(Ve(i),Ve(s))}t.stroke()}return this}strokeBorders(e){const{ctx:t}=this;t.save();const{borderTop:n,borderRight:i,borderBottom:s,borderLeft:r}=e;n&&(this.border(...n),this.line(...e.topxys())),i&&(this.border(...i),this.line(...e.rightxys())),s&&(this.border(...s),this.line(...e.bottomxys())),r&&(this.border(...r),this.line(...e.leftxys())),t.restore()}comment(e){const{ctx:t}=this,{x:n,y:i,width:s,height:r}=e,o=n,l=i;t.save(),t.beginPath(),t.moveTo(Pe(o),Pe(l)),t.lineTo(Pe(o+10),Pe(l)),t.lineTo(Pe(o),Pe(l+10)),t.fillStyle="#FC6666",t.closePath(),t.fill(),t.restore()}dropdown(e){const{ctx:t}=this,{x:n,y:i,width:s,height:r}=e,o=n+s-15,l=i+r-15;t.save(),t.beginPath(),t.moveTo(Pe(o),Pe(l)),t.lineTo(Pe(o+8),Pe(l)),t.lineTo(Pe(o+4),Pe(l+6)),t.closePath(),t.fillStyle="rgba(0, 0, 0, .45)",t.fill(),t.restore()}error(e){const{ctx:t}=this,{x:n,y:i,width:s}=e,r=n+s-1;t.save(),t.beginPath(),t.moveTo(Pe(r-8),Pe(i-1)),t.lineTo(Pe(r),Pe(i-1)),t.lineTo(Pe(r),Pe(i+8)),t.closePath(),t.fillStyle="rgba(255, 0, 0, .65)",t.fill(),t.restore()}frozen(e){const{ctx:t}=this,{x:n,y:i,width:s}=e,r=n+s-1;t.save(),t.beginPath(),t.moveTo(Pe(r-8),Pe(i-1)),t.lineTo(Pe(r),Pe(i-1)),t.lineTo(Pe(r),Pe(i+8)),t.closePath(),t.fillStyle="rgba(0, 255, 0, .85)",t.fill(),t.restore()}rect(e,t){const{ctx:n}=this,{x:i,y:s,width:r,height:o,bgcolor:l}=e;n.save(),n.beginPath(),n.fillStyle=l||"#fff",n.rect(Ve(i+1),Ve(s+1),Pe(r-2),Pe(o-2)),n.clip(),n.fill(),t(),n.restore()}}const Xe=[{key:"Arial",title:"Arial"},{key:"Helvetica",title:"Helvetica"},{key:"Source Sans Pro",title:"Source Sans Pro"},{key:"Comic Sans MS",title:"Comic Sans MS"},{key:"Courier New",title:"Courier New"},{key:"Verdana",title:"Verdana"},{key:"Lato",title:"Lato"}],Qe=[{pt:7.5,px:10},{pt:8,px:11},{pt:9,px:12},{pt:10,px:13},{pt:10.5,px:14},{pt:11,px:15},{pt:12,px:16},{pt:14,px:18.7},{pt:15,px:20},{pt:16,px:21.3},{pt:18,px:24},{pt:22,px:29.3},{pt:24,px:32},{pt:26,px:34.7},{pt:36,px:48},{pt:42,px:56}],et=(e,t)=>{const[n]=e;let i=e;if('"'===n)return e.substring(1);let s=1;if("-"===n&&(i=e.substring(1),s=-1),i[0]>="0"&&i[0]<="9")return s*Number(i);const[r,o]=d(i);return s*t(r,o)},tt=(e,t,n,i=[])=>{if("="===e[0]){const s=(e=>{const t=[],n=[];let i=[],s=0,r="",o=1,l="";for(let a=0;a<e.length;a+=1){const h=e.charAt(a);if(" "!==h){if(h>="a"&&h<="z")i.push(h.toUpperCase());else if(h>="0"&&h<="9"||h>="A"&&h<="Z"||"."===h)i.push(h);else if('"'===h){for(a+=1;'"'!==e.charAt(a);)i.push(e.charAt(a)),a+=1;n.push('"'+i.join("")),i=[]}else if("-"===h&&/[+\-*/,(]/.test(l))i.push(h);else{if("("!==h&&i.length>0&&n.push(i.join("")),")"===h){let e=t.pop();if(2===s)try{const[t,i]=d(n.pop()),[s,r]=d(n.pop());let o=0;for(let e=s;e<=t;e+=1)for(let t=r;t<=i;t+=1)n.push(p(e,t)),o+=1;n.push([e,o])}catch(e){}else if(1===s||3===s)3===s&&n.push(r),n.push([e,o]),o=1;else for(;"("!==e&&(n.push(e),!(t.length<=0));)e=t.pop();s=0}else if("="===h||">"===h||"<"===h){const t=e.charAt(a+1);r=h,"="!==t&&"-"!==t||(r+=t,a+=1),s=3}else if(":"===h)s=2;else if(","===h)3===s&&n.push(r),s=1,o+=1;else if("("===h&&i.length>0)t.push(i.join(""));else{if(t.length>0&&("+"===h||"-"===h)){let e=t[t.length-1];if("("!==e&&n.push(t.pop()),"*"===e||"/"===e)for(;t.length>0&&(e=t[t.length-1],"("!==e);)n.push(t.pop())}else if(t.length>0){const e=t[t.length-1];"*"!==e&&"/"!==e||n.push(t.pop())}t.push(h)}i=[]}l=h}}for(i.length>0&&n.push(i.join(""));t.length>0;)n.push(t.pop());return n})(e.substring(1));return s.length<=0?e:((e,t,n,i)=>{const s=[];for(let r=0;r<e.length;r+=1){const o=e[r],l=o[0];if("+"===o){const e=s.pop();s.push(B("+",s.pop(),e))}else if("-"===o)if(1===s.length){const e=s.pop();s.push(B("*",e,-1))}else{const e=s.pop();s.push(B("-",s.pop(),e))}else if("*"===o)s.push(B("*",s.pop(),s.pop()));else if("/"===o){const e=s.pop();s.push(B("/",s.pop(),e))}else if("="===l||">"===l||"<"===l){let e=s.pop();Number.isNaN(e)||(e=Number(e));let t=s.pop();Number.isNaN(t)||(t=Number(t));let n=!1;"="===l?n=t===e:">"===o?n=t>e:">="===o?n=t>=e:"<"===o?n=t<e:"<="===o&&(n=t<=e),s.push(n)}else if(Array.isArray(o)){const[e,n]=o,i=[];for(let e=0;e<n;e+=1)i.push(s.pop());s.push(t[e].render(i.reverse()))}else{if(i.includes(o))return 0;(l>="a"&&l<="z"||l>="A"&&l<="Z")&&i.push(o),s.push(et(o,n)),i.pop()}}return s[0]})(s,t,((e,s)=>tt(n(e,s),t,n,i)),i)}return e},nt={render:tt},it=[{key:"SUM",title:Y("formula.sum"),render:e=>e.reduce(((e,t)=>B("+",e,t)),0)},{key:"AVERAGE",title:Y("formula.average"),render:e=>e.reduce(((e,t)=>Number(e)+Number(t)),0)/e.length},{key:"MAX",title:Y("formula.max"),render:e=>Math.max(...e.map((e=>Number(e))))},{key:"MIN",title:Y("formula.min"),render:e=>Math.min(...e.map((e=>Number(e))))},{key:"IF",title:Y("formula._if"),render:([e,t,n])=>e?t:n},{key:"AND",title:Y("formula.and"),render:e=>e.every((e=>e))},{key:"OR",title:Y("formula.or"),render:e=>e.some((e=>e))},{key:"CONCAT",title:Y("formula.concat"),render:e=>e.join("")}],st=it,rt={};it.forEach((e=>{rt[e.key]=e}));const ot=e=>e,lt=e=>{if(/^(-?\d*.?\d*)$/.test(e)){const t=Number(e).toFixed(2).toString(),[n,...i]=t.split("\\.");return[n.replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,"),...i]}return e},at=[{key:"normal",title:Y("format.normal"),type:"string",render:ot},{key:"text",title:Y("format.text"),type:"string",render:ot},{key:"number",title:Y("format.number"),type:"number",label:"1,000.12",render:lt},{key:"percent",title:Y("format.percent"),type:"number",label:"10.12%",render:e=>e+"%"},{key:"rmb",title:Y("format.rmb"),type:"number",label:"￥10.00",render:e=>"￥"+lt(e)},{key:"usd",title:Y("format.usd"),type:"number",label:"$10.00",render:e=>"$"+lt(e)},{key:"eur",title:Y("format.eur"),type:"number",label:"€10.00",render:e=>"€"+lt(e)},{key:"date",title:Y("format.date"),type:"date",label:"26/09/2008",render:ot},{key:"time",title:Y("format.time"),type:"date",label:"15:59:00",render:ot},{key:"datetime",title:Y("format.datetime"),type:"date",label:"26/09/2008 15:59:00",render:ot},{key:"duration",title:Y("format.duration"),type:"date",label:"24:01:00",render:ot}],ht={};at.forEach((e=>{ht[e.key]=e}));const At={fillStyle:"#f4f5f8"},ct={fillStyle:"#fff",lineWidth:je,strokeStyle:"#e6e6e6"};function dt(e,t,n,i=0){const{left:s,top:r,width:o,height:l}=e.cellRect(t,n);return new $e(s,r+i,o,l,5)}function pt(e,t,n,i,s=0){const{sortedRowMap:r,rows:o,cols:l}=t;if(o.isHide(n)||l.isHide(i))return;let a=n;r.has(n)&&(a=r.get(n));const h=t.getCell(a,i);if(null===h)return;let A=!1;"editable"in h&&!1===h.editable&&(A=!0);const c=t.getCellStyleOrDefault(a,i),d=dt(t,n,i,s);d.bgcolor=c.bgcolor,void 0!==c.border&&(d.setBorders(c.border),e.strokeBorders(d)),e.rect(d,(()=>{let s=nt.render(h.text||"",rt,((e,n)=>t.getCellTextOrDefault(n,e))),r=h.comment;c.format&&(s=ht[c.format].render(s));const o=Object.assign({},c.font);o.size=function(e){for(let t=0;t<Qe.length;t+=1){const n=Qe[t];if(n.pt===e)return n.px}return e}(o.size),e.text(s,d,{align:c.align,valign:c.valign,font:o,color:c.color,strike:c.strike,underline:c.underline},c.textwrap),r&&e.comment(d),t.validations.getError(n,i)&&e.error(d),A&&e.frozen(d)}))}function ft(e){const{data:t,draw:n}=this;if(e){const{autoFilter:i}=t;if(!i.active())return;const s=i.hrange();e.intersects(s)&&s.each(((e,i)=>{const s=dt(t,e,i);n.dropdown(s)}))}}function ut(e,t,n,i,s){const{draw:r,data:o}=this;r.save(),r.translate(t,n).translate(i,s);const{exceptRowSet:l}=o,a=o.exceptRowTotalHeight(e.sri,e.eri);r.save(),r.translate(0,-a),e.each(((e,t)=>{pt(r,o,e,t)}),(e=>(e=>{const t=l.has(e);if(t){const t=o.rows.getHeight(e);r.translate(0,-t)}return!t})(e))),r.restore();const h=new Set;r.save(),r.translate(0,-a),o.eachMergesInView(e,(({sri:e,sci:t,eri:n})=>{if(l.has(e)){if(!h.has(e)){h.add(e);const t=o.rows.sumHeight(e,n+1);r.translate(0,-t)}}else pt(r,o,e,t)})),r.restore(),ft.call(this,e),r.restore()}function gt(e,t,n,i){const{draw:s}=this;s.save(),s.attr({fillStyle:"rgba(75, 137, 255, 0.08)"}).fillRect(e,t,n,i),s.restore()}function xt(e,t,n,i,s,r){const{draw:o,data:l}=this,a=t.h,h=t.w,c=r+i,d=s+n;o.save(),o.attr(At),"all"!==e&&"left"!==e||o.fillRect(0,c,n,a),"all"!==e&&"top"!==e||o.fillRect(d,0,h,i);const{sri:p,sci:f,eri:u,eci:g}=l.selector.range;o.attr({textAlign:"center",textBaseline:"middle",font:`500 ${Pe(12)}px Source Sans Pro`,fillStyle:"#585757",lineWidth:je(),strokeStyle:"#e6e6e6"}),"all"!==e&&"left"!==e||(l.rowEach(t.sri,t.eri,((e,t,i)=>{const s=c+t,r=e;o.line([0,s],[n,s]),p<=r&&r<u+1&&gt.call(this,0,s,n,i),o.fillText(r+1,n/2,s+i/2),e>0&&l.rows.isHide(e-1)&&(o.save(),o.attr({strokeStyle:"#c6c6c6"}),o.line([5,s+5],[n-5,s+5]),o.restore())})),o.line([0,a+c],[n,a+c]),o.line([n,c],[n,a+c])),"all"!==e&&"top"!==e||(l.colEach(t.sci,t.eci,((e,t,n)=>{const s=d+t,r=e;o.line([s,0],[s,i]),f<=r&&r<g+1&&gt.call(this,s,0,n,i),o.fillText(A(r),s+n/2,i/2),e>0&&l.cols.isHide(e-1)&&(o.save(),o.attr({strokeStyle:"#c6c6c6"}),o.line([s+5,5],[s+5,i-5]),o.restore())})),o.line([h+d,0],[h+d,i]),o.line([0,i],[h+d,i])),o.restore()}function mt(e,t){const{draw:n}=this;n.save(),n.attr({fillStyle:"#f4f5f8"}).fillRect(0,0,e,t),n.restore()}function bt({sri:e,sci:t,eri:n,eci:i,w:s,h:r},o,l,a,h){const{draw:A,data:c}=this,{settings:d}=c;A.save(),A.attr(ct).translate(o+a,l+h),A.clearRect(0,0,s,r),d.showGrid?(c.rowEach(e,n,((t,i,r)=>{t!==e&&A.line([0,i],[s,i]),t===n&&A.line([0,i+r],[s,i+r])})),c.colEach(t,i,((e,n,s)=>{e!==t&&A.line([n,0],[n,r]),e===i&&A.line([n+s,0],[n+s,r])})),A.restore()):A.restore()}function Et(e,t,n,i){const{draw:s,data:r}=this,o=r.viewWidth()-e,l=r.viewHeight()-t;s.save().translate(e,t).attr({strokeStyle:"rgba(75, 137, 255, .6)"}),s.line([0,i],[o,i]),s.line([n,0],[n,l]),s.restore()}const Ct=[["A3",11.69,16.54],["A4",8.27,11.69],["A5",5.83,8.27],["B4",9.84,13.9],["B5",6.93,9.84]],wt=["landscape","portrait"];function vt(e){return parseInt(96*e,10)}function yt(e){"cancel"===e?this.el.hide():this.toPrint()}function kt(e){const{paper:t}=this,{value:n}=e.target,i=Ct[n];t.w=vt(i[1]),t.h=vt(i[2]),this.preview()}function Bt(e){const{paper:t}=this,{value:n}=e.target,i=wt[n];t.orientation=i,this.preview()}class zt{constructor(e){this.paper={w:vt(Ct[0][1]),h:vt(Ct[0][2]),padding:50,orientation:wt[0],get width(){return"landscape"===this.orientation?this.h:this.w},get height(){return"landscape"===this.orientation?this.w:this.h}},this.data=e,this.el=a("div","x-spreadsheet-print").children(a("div","x-spreadsheet-print-bar").children(a("div","-title").child("Print settings"),a("div","-right").children(a("div","x-spreadsheet-buttons").children(new Le("cancel").on("click",yt.bind(this,"cancel")),new Le("next","primary").on("click",yt.bind(this,"next"))))),a("div","x-spreadsheet-print-content").children(this.contentEl=a("div","-content"),a("div","-sider").child(a("form","").children(a("fieldset","").children(a("label","").child(""+H("print.size")),a("select","").children(...Ct.map(((e,t)=>a("option","").attr("value",t).child(`${e[0]} ( ${e[1]}''x${e[2]}'' )`)))).on("change",kt.bind(this))),a("fieldset","").children(a("label","").child(""+H("print.orientation")),a("select","").children(...wt.map(((e,t)=>a("option","").attr("value",t).child(""+H("print.orientations")[t])))).on("change",Bt.bind(this))))))).hide()}resetData(e){this.data=e}preview(){const{data:e,paper:t}=this,{width:n,height:i,padding:s}=t,r=n-2*s,o=i-2*s,l=e.contentRange(),h=parseInt(l.h/o,10)+1,A=r/l.w;let c=s;const d=s;A>1&&(c+=(r-l.w)/2);let p=0,f=0;this.contentEl.html(""),this.canvases=[];const u={sri:0,sci:0,eri:0,eci:0};for(let t=0;t<h;t+=1){let t=0,s=0;const r=a("div","x-spreadsheet-canvas-card"),h=a("canvas","x-spreadsheet-canvas");this.canvases.push(h.el);const g=new Ze(h.el,n,i);for(g.save(),g.translate(c,d),A<1&&g.scale(A,A);p<=l.eri;p+=1){const n=e.rows.getHeight(p);if(t+=n,!(t<o)){s=-(t-n);break}for(let t=0;t<=l.eci;t+=1)pt(g,e,p,t,f),u.eci=t}u.eri=p,g.restore(),g.save(),g.translate(c,d),A<1&&g.scale(A,A);const x=f;e.eachMergesInView(u,(({sri:t,sci:n})=>{pt(g,e,t,n,x)})),g.restore(),u.sri=u.eri,u.sci=u.eci,f+=s,this.contentEl.child(a("div","x-spreadsheet-canvas-card-wraper").child(r.child(h)))}this.el.show()}toPrint(){this.el.hide();const{paper:e}=this,t=a("iframe","").hide(),{el:n}=t;window.document.body.appendChild(n);const{contentWindow:i}=n,s=i.document,r=document.createElement("style");r.innerHTML=`\n      @page { size: ${e.width}px ${e.height}px; };\n      canvas {\n        page-break-before: auto;        \n        page-break-after: always;\n        image-rendering: pixelated;\n      };\n    `,s.head.appendChild(r),this.canvases.forEach((e=>{const t=e.cloneNode(!1);t.getContext("2d").drawImage(e,0,0),s.body.appendChild(t)})),i.print()}}const St=[{key:"copy",title:Y("contextmenu.copy"),label:"Ctrl+C"},{key:"cut",title:Y("contextmenu.cut"),label:"Ctrl+X"},{key:"paste",title:Y("contextmenu.paste"),label:"Ctrl+V"},{key:"paste-value",title:Y("contextmenu.pasteValue"),label:"Ctrl+Shift+V"},{key:"paste-format",title:Y("contextmenu.pasteFormat"),label:"Ctrl+Alt+V"},{key:"divider"},{key:"insert-row",title:Y("contextmenu.insertRow")},{key:"insert-column",title:Y("contextmenu.insertColumn")},{key:"divider"},{key:"delete-row",title:Y("contextmenu.deleteRow")},{key:"delete-column",title:Y("contextmenu.deleteColumn")},{key:"delete-cell-text",title:Y("contextmenu.deleteCellText")},{key:"hide",title:Y("contextmenu.hide")},{key:"divider"},{key:"validation",title:Y("contextmenu.validation")},{key:"divider"},{key:"cell-printable",title:Y("contextmenu.cellprintable")},{key:"cell-non-printable",title:Y("contextmenu.cellnonprintable")},{key:"divider"},{key:"cell-editable",title:Y("contextmenu.celleditable")},{key:"cell-non-editable",title:Y("contextmenu.cellnoneditable")}];function Mt(e){return"divider"===e.key?a("div","x-spreadsheet-item divider"):a("div","x-spreadsheet-item").on("click",(()=>{this.itemClick(e.key),this.hide()})).children(e.title(),a("div","label").child(e.label||""))}function It(){return St.map((e=>Mt.call(this,e)))}class Nt{constructor(e,t=!1){this.menuItems=It.call(this),this.el=a("div","x-spreadsheet-contextmenu").children(...this.menuItems).hide(),this.viewFn=e,this.itemClick=()=>{},this.isHide=t,this.setMode("range")}setMode(e){const t=this.menuItems[12];"row-col"===e?t.show():t.hide()}hide(){const{el:e}=this;e.hide(),ie(e)}setPosition(e,t){if(this.isHide)return;const{el:n}=this,{width:i}=n.show().offset(),s=this.viewFn(),r=s.height/2;let o=e;s.width-e<=i&&(o-=i),n.css("left",o+"px"),t>r?n.css("bottom",s.height-t+"px").css("max-height",t+"px").css("top","auto"):n.css("top",t+"px").css("max-height",s.height-t+"px").css("bottom","auto"),se(n)}}class Dt{constructor(e,t,n){this.tip=H("toolbar."+e.replace(/-[a-z]/g,(e=>e[1].toUpperCase()))),t&&(this.tip+=` (${t})`),this.tag=e,this.shortcut=t,this.value=n,this.el=this.element(),this.change=()=>{}}element(){const{tip:e}=this;return a("div","x-spreadsheet-toolbar-btn").on("mouseenter",(t=>{!function(e,t){if(t.classList.contains("active"))return;const{left:n,top:i,width:s,height:r}=t.getBoundingClientRect(),o=a("div","x-spreadsheet-tooltip").html(e).show();document.body.appendChild(o.el);const l=o.box();o.css("left",n+s/2-l.width/2+"px").css("top",i+r+2+"px"),te(t,"mouseleave",(()=>{document.body.contains(o.el)&&document.body.removeChild(o.el)})),te(t,"click",(()=>{document.body.contains(o.el)&&document.body.removeChild(o.el)}))}(e,t.target)})).attr("data-tooltip",e)}setState(){}}class Tt extends Dt{dropdown(){}getValue(e){return e}element(){const{tag:e}=this;return this.dd=this.dropdown(),this.dd.change=t=>this.change(e,this.getValue(t)),super.element().child(this.dd)}setState(e){e&&(this.value=e,this.dd.setTitle(e))}}class Rt extends l{constructor(e,t,n,i,...s){super("div","x-spreadsheet-dropdown "+i),this.title=e,this.change=()=>{},this.headerClick=()=>{},"string"==typeof e?this.title=a("div","x-spreadsheet-dropdown-title").child(e):n&&this.title.addClass("arrow-left"),this.contentEl=a("div","x-spreadsheet-dropdown-content").css("width",t).hide(),this.setContentChildren(...s),this.headerEl=a("div","x-spreadsheet-dropdown-header"),this.headerEl.on("click",(()=>{"block"!==this.contentEl.css("display")?this.show():this.hide()})).children(this.title,n?a("div","x-spreadsheet-icon arrow-right").child(a("div","x-spreadsheet-icon-img arrow-down")):""),this.children(this.headerEl,this.contentEl)}setContentChildren(...e){this.contentEl.html(""),e.length>0&&this.contentEl.children(...e)}setTitle(e){this.title.html(e),this.hide()}show(){const{contentEl:e}=this;e.show(),this.parent().active(),se(this.parent(),(()=>{this.hide()}))}hide(){this.parent().active(!1),this.contentEl.hide(),ie(this.parent())}}class Ot extends Rt{constructor(e,t){super(new Ie("align-"+t),"auto",!0,"bottom-left",...e.map((e=>{return(t="align-"+e,a("div","x-spreadsheet-item").child(new Ie(t))).on("click",(()=>{this.setTitle(e),this.change(e)}));var t})))}setTitle(e){this.title.setName("align-"+e),this.hide()}}class Ft extends Tt{constructor(e){super("align","",e)}dropdown(){const{value:e}=this;return new Ot(["left","center","right"],e)}}class Wt extends Tt{constructor(e){super("valign","",e)}dropdown(){const{value:e}=this;return new Ot(["top","middle","bottom"],e)}}class Ht extends Dt{element(){const{tag:e}=this;return super.element().child(new Ie(e)).on("click",(()=>this.click()))}click(){this.change(this.tag,this.toggle())}setState(e){this.el.active(e)}toggle(){return this.el.toggle()}active(){return this.el.hasClass("active")}}class Yt extends Ht{constructor(){super("autofilter")}setState(){}}class Ut extends Ht{constructor(){super("font-bold","Ctrl+B")}}class qt extends Ht{constructor(){super("font-italic","Ctrl+I")}}class Gt extends Ht{constructor(){super("strike","Ctrl+U")}}class Jt extends Ht{constructor(){super("underline","Ctrl+U")}}const Lt=["#ffffff","#000100","#e7e5e6","#445569","#5b9cd6","#ed7d31","#a5a5a5","#ffc001","#4371c6","#71ae47"],_t=[["#f2f2f2","#7f7f7f","#d0cecf","#d5dce4","#deeaf6","#fce5d5","#ededed","#fff2cd","#d9e2f3","#e3efd9"],["#d8d8d8","#595959","#afabac","#adb8ca","#bdd7ee","#f7ccac","#dbdbdb","#ffe59a","#b3c6e7","#c5e0b3"],["#bfbfbf","#3f3f3f","#756f6f","#8596b0","#9cc2e6","#f4b184","#c9c9c9","#fed964","#8eaada","#a7d08c"],["#a5a5a5","#262626","#3a3839","#333f4f","#2e75b5","#c45a10","#7b7b7b","#bf8e01","#2f5596","#538136"],["#7f7f7f","#0c0c0c","#171516","#222a35","#1f4e7a","#843c0a","#525252","#7e6000","#203864","#365624"]],jt=["#c00000","#fe0000","#fdc101","#ffff01","#93d051","#00b04e","#01b0f1","#0170c1","#012060","#7030a0"];function Pt(e){return a("td","").child(a("div","x-spreadsheet-color-palette-cell").on("click.stop",(()=>this.change(e))).css("background-color",e))}class Vt{constructor(){this.el=a("div","x-spreadsheet-color-palette"),this.change=()=>{};const e=a("table","").children(a("tbody","").children(a("tr","x-spreadsheet-theme-color-placeholders").children(...Lt.map((e=>Pt.call(this,e)))),..._t.map((e=>a("tr","x-spreadsheet-theme-colors").children(...e.map((e=>Pt.call(this,e)))))),a("tr","x-spreadsheet-standard-colors").children(...jt.map((e=>Pt.call(this,e))))));this.el.child(e)}}class $t extends Rt{constructor(e,t){const n=new Ie(e).css("height","16px").css("border-bottom","3px solid "+t),i=new Vt;i.change=e=>{this.setTitle(e),this.change(e)},super(n,"auto",!1,"bottom-left",i.el)}setTitle(e){this.title.css("border-color",e),this.hide()}}const Kt=[["thin",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" style="user-select: none;"></line></svg>'],["medium",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="2" style="user-select: none;"><line x1="0" y1="1.0" x2="50" y2="1.0" stroke-width="2" stroke="black" style="user-select: none;"></line></svg>'],["thick",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="3" style="user-select: none;"><line x1="0" y1="1.5" x2="50" y2="1.5" stroke-width="3" stroke="black" style="user-select: none;"></line></svg>'],["dashed",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="2" style="user-select: none;"></line></svg>'],["dotted",'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="1" style="user-select: none;"></line></svg>']];class Zt extends Rt{constructor(e){const t=new Ie("line-type");let n=0;const i=Kt.map(((t,s)=>a("div","x-spreadsheet-item state "+(e===t[0]?"checked":"")).on("click",(()=>{i[n].toggle("checked"),i[s].toggle("checked"),n=s,this.hide(),this.change(t)})).child(a("div","x-spreadsheet-line-type").html(t[1]))));super(t,"auto",!1,"bottom-left",...i)}}function Xt(...e){return a("table","").child(a("tbody","").children(...e))}function Qt(e){return a("td","").child(a("div","x-spreadsheet-border-palette-cell").child(new Ie("border-"+e)).on("click",(()=>{this.mode=e;const{mode:t,style:n,color:i}=this;this.change({mode:t,style:n,color:i})})))}class en{constructor(){this.color="#000",this.style="thin",this.mode="all",this.change=()=>{},this.ddColor=new $t("line-color",this.color),this.ddColor.change=e=>{this.color=e},this.ddType=new Zt(this.style),this.ddType.change=([e])=>{this.style=e},this.el=a("div","x-spreadsheet-border-palette");const e=Xt(a("tr","").children(a("td","x-spreadsheet-border-palette-left").child(Xt(a("tr","").children(...["all","inside","horizontal","vertical","outside"].map((e=>Qt.call(this,e)))),a("tr","").children(...["left","top","right","bottom","none"].map((e=>Qt.call(this,e)))))),a("td","x-spreadsheet-border-palette-right").children(a("div","x-spreadsheet-toolbar-btn").child(this.ddColor.el),a("div","x-spreadsheet-toolbar-btn").child(this.ddType.el))));this.el.child(e)}}class tn extends Rt{constructor(){const e=new Ie("border-all"),t=new en;t.change=e=>{this.change(e),this.hide()},super(e,"auto",!1,"bottom-left",t.el)}}class nn extends Tt{constructor(){super("border")}dropdown(){return new tn}}class sn extends Dt{element(){return super.element().child(new Ie(this.tag)).on("click",(()=>this.change(this.tag)))}setState(e){this.el.disabled(e)}}class rn extends sn{constructor(){super("clearformat")}}class on extends Ht{constructor(){super("paintformat")}setState(){}}class ln extends Tt{constructor(e){super("color",void 0,e)}dropdown(){const{tag:e,value:t}=this;return new $t(e,t)}}class an extends Tt{constructor(e){super("bgcolor",void 0,e)}dropdown(){const{tag:e,value:t}=this;return new $t(e,t)}}class hn extends Rt{constructor(){super("10","60px",!0,"bottom-left",...Qe.map((e=>a("div","x-spreadsheet-item").on("click",(()=>{this.setTitle(""+e.pt),this.change(e)})).child(""+e.pt))))}}class An extends Tt{constructor(){super("font-size")}getValue(e){return e.pt}dropdown(){return new hn}}class cn extends Rt{constructor(){const e=Xe.map((e=>a("div","x-spreadsheet-item").on("click",(()=>{this.setTitle(e.title),this.change(e)})).child(e.title)));super(Xe[0].title,"160px",!0,"bottom-left",...e)}}class dn extends Tt{constructor(){super("font-name")}getValue(e){return e.key}dropdown(){return new cn}}class pn extends Rt{constructor(){let e=at.slice(0);e.splice(2,0,{key:"divider"}),e.splice(8,0,{key:"divider"}),e=e.map((e=>{const t=a("div","x-spreadsheet-item");return"divider"===e.key?t.addClass("divider"):(t.child(e.title()).on("click",(()=>{this.setTitle(e.title()),this.change(e)})),e.label&&t.child(a("div","label").html(e.label))),t})),super("Normal","220px",!0,"bottom-left",...e)}setTitle(e){for(let t=0;t<at.length;t+=1)at[t].key===e&&this.title.html(at[t].title());this.hide()}}class fn extends Tt{constructor(){super("format")}getValue(e){return e.key}dropdown(){return new pn}}class un extends Rt{constructor(){const e=it.map((e=>a("div","x-spreadsheet-item").on("click",(()=>{this.hide(),this.change(e)})).child(e.key)));super(new Ie("formula"),"180px",!0,"bottom-left",...e)}}class gn extends Tt{constructor(){super("formula")}getValue(e){return e.key}dropdown(){return new un}}class xn extends Ht{constructor(){super("freeze")}}class mn extends Ht{constructor(){super("merge")}setState(e,t){this.el.active(e).disabled(t)}}class bn extends sn{constructor(){super("redo","Ctrl+Y")}}class En extends sn{constructor(){super("undo","Ctrl+Z")}}class Cn extends sn{constructor(){super("print","Ctrl+P")}}class wn extends Ht{constructor(){super("textwrap")}}class vn extends Rt{constructor(){const e=new Ie("ellipsis"),t=a("div","x-spreadsheet-toolbar-more");super(e,"auto",!1,"bottom-right",t),this.moreBtns=t,this.contentEl.css("max-width","420px")}}class yn extends Tt{constructor(){super("more"),this.el.hide()}dropdown(){return new vn}show(){this.el.show()}hide(){this.el.hide()}}class kn extends Ht{constructor(e){super("comment")}click(){super.click()}}function Bn(){return a("div","x-spreadsheet-toolbar-divider")}function zn(){this.btns2=[],this.items.forEach((e=>{if(Array.isArray(e))e.forEach((({el:e})=>{const t=e.box(),{marginLeft:n,marginRight:i}=e.computedStyle();this.btns2.push([e,t.width+parseInt(n,10)+parseInt(i,10)])}));else{const t=e.box(),{marginLeft:n,marginRight:i}=e.computedStyle();this.btns2.push([e,t.width+parseInt(n,10)+parseInt(i,10)])}}))}function Sn(){const{el:e,btns:t,moreEl:n,btns2:i}=this,{moreBtns:s,contentEl:r}=n.dd;e.css("width",this.widthFn()-60+"px");const o=e.box();let l=160,a=12;const h=[],A=[];i.forEach((([e,t],n)=>{l+=t,n===i.length-1||l<o.width?h.push(e):(a+=t,A.push(e))})),t.html("").children(...h),s.html("").children(...A),r.css("width",a+"px"),A.length>0?n.show():n.hide()}class Mn{constructor(e,t,n=!1){this.data=e,this.change=()=>{},this.widthFn=t,this.isHide=n;const i=e.defaultStyle();this.items=[[this.undoEl=new En,this.redoEl=new bn,new Cn,this.paintformatEl=new on,this.clearformatEl=new rn],Bn(),[this.formatEl=new fn],Bn(),[this.fontEl=new dn,this.fontSizeEl=new An],Bn(),[this.boldEl=new Ut,this.italicEl=new qt,this.underlineEl=new Jt,this.strikeEl=new Gt,this.textColorEl=new ln(i.color)],Bn(),[this.fillColorEl=new an(i.bgcolor),this.borderEl=new nn,this.mergeEl=new mn],Bn(),[this.alignEl=new Ft(i.align),this.valignEl=new Wt(i.valign),this.textwrapEl=new wn],Bn(),[this.freezeEl=new xn,this.autofilterEl=new Yt,this.formulaEl=new gn,this.moreEl=new yn],Bn(),[this.commentEl=new kn]],this.el=a("div","x-spreadsheet-toolbar"),this.btns=a("div","x-spreadsheet-toolbar-btns"),this.items.forEach((e=>{Array.isArray(e)?e.forEach((e=>{this.btns.child(e.el),e.change=(...e)=>{this.change(...e)}})):this.btns.child(e.el)})),this.el.child(this.btns),n?this.el.hide():(this.reset(),setTimeout((()=>{zn.call(this),Sn.call(this)}),0),te(window,"resize",(()=>{Sn.call(this)})))}paintformatActive(){return this.paintformatEl.active()}paintformatToggle(){this.paintformatEl.toggle()}trigger(e){this[e+"El"].click()}resetData(e){this.data=e,this.reset()}reset(){if(this.isHide)return;const{data:e}=this,t=e.getSelectedCellStyle();this.undoEl.setState(!e.canUndo()),this.redoEl.setState(!e.canRedo()),this.mergeEl.setState(e.canUnmerge(),!e.selector.multiple()),this.autofilterEl.setState(!e.canAutofilter());const{font:n,format:i}=t;this.formatEl.setState(i),this.fontEl.setState(n.name),this.fontSizeEl.setState(n.size),this.boldEl.setState(n.bold),this.italicEl.setState(n.italic),this.underlineEl.setState(t.underline),this.strikeEl.setState(t.strike),this.textColorEl.setState(t.color),this.fillColorEl.setState(t.bgcolor),this.alignEl.setState(t.align),this.valignEl.setState(t.valign),this.textwrapEl.setState(t.textwrap),this.freezeEl.setState(e.freezeIsActive());const s=e.getSelectedCell();this.commentEl.setState(!(!s||!s.comment))}}class In{constructor(e,t){this.vchange=()=>{},this.el=a("div","x-spreadsheet-form-input"),this.input=a("input","").css("width",e).on("input",(e=>this.vchange(e))).attr("placeholder",t),this.el.child(this.input)}focus(){setTimeout((()=>{this.input.el.focus()}),10)}hint(e){this.input.attr("placeholder",e)}val(e){return this.input.val(e)}}class Nn{constructor(e,t,n,i=(e=>e),s=(()=>{})){this.key=e,this.getTitle=i,this.vchange=()=>{},this.el=a("div","x-spreadsheet-form-select"),this.suggest=new Me(t.map((e=>({key:e,title:this.getTitle(e)}))),(e=>{this.itemClick(e.key),s(e.key),this.vchange(e.key)}),n,this.el),this.el.children(this.itemEl=a("div","input-text").html(this.getTitle(e)),this.suggest.el).on("click",(()=>this.show()))}show(){this.suggest.search("")}itemClick(e){this.key=e,this.itemEl.html(this.getTitle(e))}val(e){return void 0!==e?(this.key=e,this.itemEl.html(this.getTitle(e)),this):this.key}}const Dn={number:/(^\d+$)|(^\d+(\.\d{0,4})?$)/,date:/^\d{4}-\d{1,2}-\d{1,2}$/};class Tn{constructor(e,t,n,i){this.label="",this.rule=t,n&&(this.label=a("label","label").css("width",i+"px").html(n)),this.tip=a("div","tip").child("tip").hide(),this.input=e,this.input.vchange=()=>this.validate(),this.el=a("div","x-spreadsheet-form-field").children(this.label,e.el,this.tip)}isShow(){return"none"!==this.el.css("display")}show(){this.el.show()}hide(){return this.el.hide(),this}val(e){return this.input.val(e)}hint(e){this.input.hint(e)}validate(){const{input:e,rule:t,tip:n,el:i}=this,s=e.val();return t.required&&/^\s*$/.test(s)?(n.html(H("validation.required")),i.addClass("error"),!1):!t.type&&!t.pattern||(t.pattern||Dn[t.type]).test(s)?(i.removeClass("error"),!0):(n.html(H("validation.notMatch")),i.addClass("error"),!1)}}class Rn extends class{constructor(e,t,n="600px"){this.title=e,this.el=a("div","x-spreadsheet-modal").css("width",n).children(a("div","x-spreadsheet-modal-header").children(new Ie("close").on("click.stop",(()=>this.hide())),this.title),a("div","x-spreadsheet-modal-content").children(...t)).hide()}show(){this.dimmer=a("div","x-spreadsheet-dimmer active"),document.body.appendChild(this.dimmer.el);const{width:e,height:t}=this.el.show().box(),{clientHeight:n,clientWidth:i}=document.documentElement;this.el.offset({left:(i-e)/2,top:(n-t)/3}),window.xkeydownEsc=e=>{27===e.keyCode&&this.hide()},te(window,"keydown",window.xkeydownEsc)}hide(){this.el.hide(),document.body.removeChild(this.dimmer.el),ne(window,"keydown",window.xkeydownEsc),delete window.xkeydownEsc}}{constructor(){const e=new Tn(new Nn("cell",["cell"],"100%",(e=>H("dataValidation.modeType."+e))),{required:!0},H("dataValidation.range")+":",100),t=new Tn(new In("120px","E3 or E3:F12"),{required:!0,pattern:/^([A-Z]{1,2}[1-9]\d*)(:[A-Z]{1,2}[1-9]\d*)?$/}),n=new Tn(new Nn("list",["list","number","date","phone","email"],"100%",(e=>H("dataValidation.type."+e)),(e=>this.criteriaSelected(e))),{required:!0},H("dataValidation.criteria")+":",100),i=new Tn(new Nn("be",["be","nbe","eq","neq","lt","lte","gt","gte"],"160px",(e=>H("dataValidation.operator."+e)),(e=>this.criteriaOperatorSelected(e))),{required:!0}).hide(),s=new Tn(new In("70px","10"),{required:!0}).hide(),r=new Tn(new In("70px","100"),{required:!0,type:"number"}).hide(),o=new Tn(new In("120px","a,b,c"),{required:!0}),l=new Tn(new In("70px","10"),{required:!0,type:"number"}).hide();super(H("contextmenu.validation"),[a("div","x-spreadsheet-form-fields").children(e.el,t.el),a("div","x-spreadsheet-form-fields").children(n.el,i.el,s.el,r.el,l.el,o.el),a("div","x-spreadsheet-buttons").children(new Le("cancel").on("click",(()=>this.btnClick("cancel"))),new Le("remove").on("click",(()=>this.btnClick("remove"))),new Le("save","primary").on("click",(()=>this.btnClick("save"))))]),this.mf=e,this.rf=t,this.cf=n,this.of=i,this.minvf=s,this.maxvf=r,this.vf=l,this.svf=o,this.change=()=>{}}showVf(e){const t="date"===e?"2018-11-12":"10",{vf:n}=this;n.input.hint(t),n.show()}criteriaSelected(e){const{of:t,minvf:n,maxvf:i,vf:s,svf:r}=this;"date"===e||"number"===e?(t.show(),n.rule.type=e,i.rule.type=e,"date"===e?(n.hint("2018-11-12"),i.hint("2019-11-12")):(n.hint("10"),i.hint("100")),n.show(),i.show(),s.hide(),r.hide()):("list"===e?r.show():r.hide(),s.hide(),t.hide(),n.hide(),i.hide())}criteriaOperatorSelected(e){if(!e)return;const{minvf:t,maxvf:n,vf:i}=this;if("be"===e||"nbe"===e)t.show(),n.show(),i.hide();else{const e=this.cf.val();i.rule.type=e,"date"===e?i.hint("2018-11-12"):i.hint("10"),i.show(),t.hide(),n.hide()}}btnClick(e){if("cancel"===e)this.hide();else if("remove"===e)this.change("remove"),this.hide();else if("save"===e){const e=["mf","rf","cf","of","svf","vf","minvf","maxvf"];for(let t=0;t<e.length;t+=1){const n=this[e[t]];if(n.isShow()&&!n.validate())return}const t=this.mf.val(),n=this.rf.val(),i=this.cf.val(),s=this.of.val();let r=this.svf.val();"number"!==i&&"date"!==i||(r="be"===s||"nbe"===s?[this.minvf.val(),this.maxvf.val()]:this.vf.val()),this.change("save",t,n,{type:i,operator:s,required:!1,value:r}),this.hide()}}setValue(e){if(e){const{mf:t,rf:n,cf:i,of:s,svf:r,vf:o,minvf:l,maxvf:a}=this,{mode:h,ref:A,validator:c}=e,{type:d,operator:p,value:f}=c||{type:"list"};t.val(h||"cell"),n.val(A),i.val(d),s.val(p),Array.isArray(f)?(l.val(f[0]),a.val(f[1])):(r.val(f||""),o.val(f||"")),this.criteriaSelected(d),this.criteriaOperatorSelected(p)}this.show()}}function On(e){return a("div","x-spreadsheet-item "+e)}function Fn(e){return On("state").child(H("sort."+e)).on("click.stop",(()=>this.itemClick(e)))}function Wn(e){const{filterbEl:t,filterValues:n}=this;t.html(""),Object.keys(e).forEach(((i,s)=>{const r=e[i],o=n.includes(i)?"checked":"";t.child(a("div","x-spreadsheet-item state "+o).on("click.stop",(()=>this.filterClick(s,i))).children(""===i?H("filter.empty"):i,a("div","label").html(`(${r})`)))}))}function Hn(){const{filterhEl:e,filterValues:t,values:n}=this;e.html(`${t.length} / ${n.length}`),e.checked(t.length===n.length)}class Yn{constructor(){this.filterbEl=a("div","x-spreadsheet-body"),this.filterhEl=a("div","x-spreadsheet-header state").on("click.stop",(()=>this.filterClick(0,"all"))),this.el=a("div","x-spreadsheet-sort-filter").children(this.sortAscEl=Fn.call(this,"asc"),this.sortDescEl=Fn.call(this,"desc"),On("divider"),a("div","x-spreadsheet-filter").children(this.filterhEl,this.filterbEl),a("div","x-spreadsheet-buttons").children(new Le("cancel").on("click",(()=>this.btnClick("cancel"))),new Le("ok","primary").on("click",(()=>this.btnClick("ok"))))).hide(),this.ci=null,this.sortDesc=null,this.values=null,this.filterValues=[]}btnClick(e){if("ok"===e){const{ci:e,sort:t,filterValues:n}=this;this.ok&&this.ok(e,t,"in",n)}this.hide()}itemClick(e){this.sort=e;const{sortAscEl:t,sortDescEl:n}=this;t.checked("asc"===e),n.checked("desc"===e)}filterClick(e,t){const{filterbEl:n,filterValues:i,values:s}=this,r=n.children();"all"===t?r.length===i.length?(this.filterValues=[],r.forEach((e=>a(e).checked(!1)))):(this.filterValues=Array.from(s),r.forEach((e=>a(e).checked(!0)))):a(r[e]).toggle("checked")?i.push(t):i.splice(i.findIndex((e=>e===t)),1),Hn.call(this)}set(e,t,n,i){this.ci=e;const{sortAscEl:s,sortDescEl:r}=this;null!==i?(this.sort=i.order,s.checked(i.asc()),r.checked(i.desc())):(this.sortDesc=null,s.checked(!1),r.checked(!1)),this.values=Object.keys(t),this.filterValues=n?Array.from(n.value):Object.keys(t),Wn.call(this,t,n),Hn.call(this)}setOffset(e){this.el.offset(e).show();let t=1;se(this.el,(()=>{t<=0&&this.hide(),t-=1}))}show(){this.el.show()}hide(){this.el.hide(),ie(this.el)}}function Un(e,t){const n=a("div","x-spreadsheet-toast"),i=a("div","x-spreadsheet-dimmer active");n.children(a("div","x-spreadsheet-toast-header").children(new Ie("close").on("click.stop",(()=>(document.body.removeChild(n.el),void document.body.removeChild(i.el)))),e),a("div","x-spreadsheet-toast-content").html(t)),document.body.appendChild(n.el),document.body.appendChild(i.el);const{width:s,height:r}=n.box(),{clientHeight:o,clientWidth:l}=document.documentElement;n.offset({left:(l-s)/2,top:(o-r)/3})}let qn=1;class Gn{constructor(){this.el=a("div","x-spreadsheet-comments"),this.areaEl=a("div","x-spreadsheet-comments-area"),this.commtEl=a("div","x-spreadsheet-comment"),this.txtAreaEl=a("textarea","x-spreadsheet-comment-textarea"),this.txtAreaEl.on("mousedown.stop",(e=>{})).on("click.stop",(e=>{})).on("input",(e=>{this.data.setSelectedCellAttr("content",e.target.value)})),this.areaEl.child(this.commtEl.child(this.txtAreaEl)),this.el.child(this.areaEl).hide(),this.freeze={w:0,h:0}}setOffset(e){const{areaEl:t,freeze:n,el:i}=this,{top:s,left:r,height:o,width:l,t:a,l:h}=e,A=(this.areaEl.box(),{left:0,top:0});n.w>h&&n.h>a||(n.w<h&&n.h<a?(A.left=n.w,A.top=n.h):n.w>h?A.top=n.h:n.h>a&&(A.left=n.w)),i.offset(A),t.offset({left:r-A.left-100+l/2,top:s-A.top+o+5})}setFreezeLengths(e,t){this.freeze.w=e,this.freeze.h=t}show(e){this.data=e,this.updateContent();const t=e.getSelectedRect();this.setOffset(t),this.el.show()}clear(){this.el.hide()}updateContent(){this.txtAreaEl.el.value=this.data.getSelectedCell().content||""}showComment(){}init(e){this.data=e,e.setSelectedCellAttr("commentId",qn++),this.show(e)}}function Jn(e,t){let n;return(...i)=>{const s=this,r=i;n||(n=setTimeout((()=>{n=null,e.apply(s,r)}),t))}}function Ln(){const{data:e,verticalScrollbar:t,horizontalScrollbar:n}=this,{l:i,t:s,left:r,top:o,width:l,height:a}=e.getSelectedRect(),h=this.getTableOffset();if(Math.abs(r)+l>h.width)n.move({left:i+l-h.width});else{const t=e.freezeTotalWidth();r<t&&n.move({left:i-1-t})}if(Math.abs(o)+a>h.height)t.move({top:s+a-h.height-1});else{const n=e.freezeTotalHeight();o<n&&t.move({top:s-1-n})}}function _n(e,t,n,i=!0,s=!1){if(-1===t&&-1===n)return;const{table:r,selector:o,toolbar:l,data:a,contextMenu:h}=this;h.setMode(-1===t||-1===n?"row-col":"range");const A=a.getCell(t,n);e?(o.setEnd(t,n,s),this.trigger("cells-selected",A,o.range)):(o.set(t,n,i),this.trigger("cell-selected",A,t,n)),l.reset(),r.render(),A&&A.comment&&(this.commentor.show(a),this.isCommenting=!0)}function jn(e,t){const{selector:n,data:i}=this,{rows:s,cols:r}=i;let[o,l]=n.indexes;const{eri:a,eci:h}=n.range;e&&([o,l]=n.moveIndexes),"left"===t?l>0&&(l-=1):"right"===t?(h!==l&&(l=h),l<r.len-1&&(l+=1)):"up"===t?o>0&&(o-=1):"down"===t?(a!==o&&(o=a),o<s.len-1&&(o+=1)):"row-first"===t?l=0:"row-last"===t?l=r.len-1:"col-first"===t?o=0:"col-last"===t&&(o=s.len-1),e&&(n.moveIndexes=[o,l]),_n.call(this,e,o,l),Ln.call(this)}function Pn(e){if(0!==e.buttons)return;if("x-spreadsheet-resizer-hover"===e.target.className)return;const{offsetX:t,offsetY:n}=e,{rowResizer:i,colResizer:s,tableEl:r,data:o}=this,{rows:l,cols:a}=o;if(t>a.indexWidth&&n>l.height)return i.hide(),void s.hide();const h=r.box(),A=o.getCellRectByXY(e.offsetX,e.offsetY);A.ri>=0&&-1===A.ci?(A.width=a.indexWidth,i.show(A,{width:h.width}),l.isHide(A.ri-1)?i.showUnhide(A.ri):i.hideUnhide()):i.hide(),-1===A.ri&&A.ci>=0?(A.height=l.height,s.show(A,{height:h.height}),a.isHide(A.ci-1)?s.showUnhide(A.ci):s.hideUnhide()):s.hide()}let Vn=15;function $n(e){if(Vn-=1,Vn>0)return;Vn=15;const{verticalScrollbar:t,horizontalScrollbar:n,data:i,commentor:s}=this,{top:r}=t.scroll(),{left:o}=n.scroll(),{rows:l,cols:a}=i;s.clear();const{deltaY:h,deltaX:A}=e,c=(e,t)=>{let n=e,i=0;do{i=t(n),n+=1}while(i<=0);return i},d=e=>{if(e>0){const e=i.scroll.ri+1;if(e<l.len){const n=c(e,(e=>l.getHeight(e)));t.move({top:r+n-1})}}else{const e=i.scroll.ri-1;if(e>=0){const n=c(e,(e=>l.getHeight(e)));t.move({top:0===e?0:r-n})}}},p=Math.abs(h),f=Math.abs(A),u=Math.max(p,f);/Firefox/i.test(window.navigator.userAgent)&&Jn(d(e.detail),50),u===f&&Jn((e=>{if(e>0){const e=i.scroll.ci+1;if(e<a.len){const t=c(e,(e=>a.getWidth(e)));n.move({left:o+t-1})}}else{const e=i.scroll.ci-1;if(e>=0){const t=c(e,(e=>a.getWidth(e)));n.move({left:0===e?0:o-t})}}})(A),50),u===p&&Jn(d(h),50)}function Kn(e,t){const{verticalScrollbar:n,horizontalScrollbar:i}=this,{top:s}=n.scroll(),{left:r}=i.scroll();"left"===e||"right"===e?i.move({left:r-t}):"up"!==e&&"down"!==e||n.move({top:s-t})}function Zn(){const{data:e,verticalScrollbar:t}=this,{height:n}=this.getTableOffset(),i=e.exceptRowTotalHeight(0,-1);t.set(n,e.rows.totalHeight()-i)}function Xn(){const{data:e,horizontalScrollbar:t}=this,{width:n}=this.getTableOffset();e&&t.set(n,e.cols.totalWidth())}function Qn(){const{selector:e,data:t,editor:n,commentor:i}=this,[s,r]=t.freeze;if(s>0||r>0){const e=t.freezeTotalWidth(),s=t.freezeTotalHeight();n.setFreezeLengths(e,s),i.setFreezeLengths(e,s)}e.resetAreaOffset()}function ei(){const{tableEl:e,overlayerEl:t,overlayerCEl:n,table:i,toolbar:s,selector:r,el:o}=this,l=this.getTableOffset(),a=this.getRect();e.attr(a),t.offset(a),n.offset(l),o.css("width",a.width+"px"),Zn.call(this),Xn.call(this),Qn.call(this),i.render(),s.reset(),r.reset()}function ti(){const{data:e,selector:t}=this;e.clearClipboard(),t.hideClipboard()}function ni(){const{data:e,selector:t}=this;e.copy(),t.showClipboard()}function ii(){const{data:e,selector:t}=this;e.cut(),t.showClipboard()}function si(e,t){const{data:n}=this;if("read"!==n.settings.mode)if(n.paste(e,(e=>Un("Tip",e))))ei.call(this);else if(t){const e=t.clipboardData.getData("text/plain");this.data.pasteFromText(e),ei.call(this)}}function ri(){this.data.hideRowsOrCols(),ei.call(this)}function oi(e,t){this.data.unhideRowsOrCols(e,t),ei.call(this)}function li(){const{data:e}=this;e.autofilter(),ei.call(this)}function ai(){const{toolbar:e}=this;e.paintformatActive()&&(si.call(this,"format"),ti.call(this),e.paintformatToggle())}function hi(e){const{selector:t,data:n,table:i,sortFilter:s}=this,{offsetX:r,offsetY:o}=e,l="x-spreadsheet-selector-corner"===e.target.className,a=n.getCellRectByXY(r,o),{left:h,top:A,width:c,height:d}=a;let{ri:p,ci:f}=a;const{autoFilter:u}=n;if(u.includes(p,f)&&h+c-20<r&&A+d-20<o){const e=u.items(f,((e,t)=>n.rows.getCell(e,t)));return s.hide(),s.set(f,e,u.getFilter(f),u.getSort(f)),void s.setOffset({left:h,top:A+d+2})}e.shiftKey||(l?t.showAutofill(p,f):_n.call(this,!1,p,f),re(window,(e=>{({ri:p,ci:f}=n.getCellRectByXY(e.offsetX,e.offsetY)),l?t.showAutofill(p,f):1!==e.buttons||e.shiftKey||_n.call(this,!0,p,f,!0,!0)}),(()=>{l&&t.arange&&"read"!==n.settings.mode&&n.autofill(t.arange,"all",(e=>Un("Tip",e)))&&i.render(),t.hideAutofill(),ai.call(this)}))),l||1!==e.buttons||e.shiftKey&&_n.call(this,!0,p,f)}function Ai(){const{editor:e,data:t}=this,n=t.getSelectedRect(),i=this.getTableOffset();let s="top";n.top>i.height/2&&(s="bottom"),console.log("setOffset",n,s),e.setOffset(n,s)}function ci(){if(this.isCommenting)return;const{editor:e,data:t}=this;"read"!==t.settings.mode&&(Ai.call(this),e.setCell(t.getSelectedCell(),t.getSelectedValidator()),ti.call(this))}function di(e){const{data:t,table:n,selector:i,commentor:s}=this;t.scrolly(e,(()=>{i.resetBRLAreaOffset(),Ai.call(this),n.render()})),s.clear()}function pi(e){const{data:t,table:n,selector:i,commentor:s}=this;t.scrollx(e,(()=>{i.resetBRTAreaOffset(),Ai.call(this),n.render()})),s.clear()}function fi(e,t){const{ri:n}=e,{table:i,selector:s,data:r}=this;r.rows.setHeight(n,t),i.render(),s.resetAreaOffset(),Zn.call(this),Ai.call(this)}function ui(e,t){const{ci:n}=e,{table:i,selector:s,data:r}=this;r.cols.setWidth(n,t),i.render(),s.resetAreaOffset(),Xn.call(this),Ai.call(this)}function gi(e,t="finished"){const{data:n,table:i}=this;if("read"===n.settings.mode)return;n.setSelectedCellText(e,t);const{ri:s,ci:r}=n.selector;"finished"===t?i.render():this.trigger("cell-edited",e,s,r)}function xi(e){const{data:t}=this;"read"!==t.settings.mode&&("insert-row"===e?t.insert("row"):"delete-row"===e?t.delete("row"):"insert-column"===e?t.insert("column"):"delete-column"===e?t.delete("column"):"delete-cell"===e?t.deleteCell():"delete-cell-format"===e?t.deleteCell("format"):"delete-cell-text"===e?t.deleteCell("text"):"cell-printable"===e?t.setSelectedCellAttr("printable",!0):"cell-non-printable"===e?t.setSelectedCellAttr("printable",!1):"cell-editable"===e?t.setSelectedCellAttr("editable",!0):"cell-non-editable"===e&&t.setSelectedCellAttr("editable",!1),ti.call(this),ei.call(this))}function mi(e,t){const{data:n}=this;if("undo"===e)this.undo();else if("redo"===e)this.redo();else if("print"===e)this.print.preview();else if("paintformat"===e)!0===t?ni.call(this):ti.call(this);else if("clearformat"===e)xi.call(this,"delete-cell-format");else if("link"===e);else if("chart"===e);else if("autofilter"===e)li.call(this);else if("freeze"===e)if(t){const{ri:e,ci:t}=n.selector;this.freeze(e,t)}else this.freeze(0,0);else n.setSelectedCellAttr(e,t),"formula"!==e||n.selector.multiple()||ci.call(this),ei.call(this),"comment"==e&&(t?(this.commentor.init(n),this.isCommenting=!0):this.commentor.clear())}function bi(e,t,n,i){this.data.setAutoFilter(e,t,n,i),ei.call(this)}function Ei(){const{selector:e,overlayerEl:t,rowResizer:n,colResizer:i,verticalScrollbar:s,horizontalScrollbar:r,editor:o,commentor:l,contextMenu:a,toolbar:h,modalValidation:A,sortFilter:c}=this;t.on("mousemove",(e=>{Pn.call(this,e)})).on("mousedown",(e=>{this.isCommenting=!1,l.clear(),o.clear(),a.hide(),2===e.buttons?(this.data.xyInSelectedRect(e.offsetX,e.offsetY)||hi.call(this,e),a.setPosition(e.offsetX,e.offsetY),e.stopPropagation()):2===e.detail?(console.log("双击进入编辑"),ci.call(this)):(console.log("单击进入选中"),hi.call(this,e))})).on("mousewheel.stop",(e=>{$n.call(this,e)})).on("mouseout",(e=>{const{offsetX:t,offsetY:s}=e;s<=0&&i.hide(),t<=0&&n.hide()})),e.inputChange=e=>{gi.call(this,e,"input"),ci.call(this)},function(e,{move:t,end:n}){let i=0,s=0;te(e,"touchstart",(e=>{const{pageX:t,pageY:n}=e.touches[0];i=t,s=n})),te(e,"touchmove",(e=>{if(!t)return;const{pageX:n,pageY:r}=e.changedTouches[0],o=n-i,l=r-s;(Math.abs(o)>10||Math.abs(l)>10)&&(oe(o,l,e,t),i=n,s=r),e.preventDefault()})),te(e,"touchend",(e=>{if(!n)return;const{pageX:t,pageY:r}=e.changedTouches[0];oe(t-i,r-s,e,n)}))}(t.el,{move:(e,t)=>{Kn.call(this,e,t)}}),h.change=(e,t)=>mi.call(this,e,t),c.ok=(e,t,n,i)=>bi.call(this,e,t,n,i),n.finishedFn=(e,t)=>{fi.call(this,e,t)},i.finishedFn=(e,t)=>{ui.call(this,e,t)},n.unhideFn=e=>{oi.call(this,"row",e)},i.unhideFn=e=>{oi.call(this,"col",e)},s.moveFn=(e,t)=>{di.call(this,e,t)},r.moveFn=(e,t)=>{pi.call(this,e,t)},o.change=(e,t)=>{gi.call(this,t,e)},A.change=(e,...t)=>{"save"===e?this.data.addValidation(...t):this.data.removeValidation()},a.itemClick=e=>{"validation"===e?A.setValue(this.data.getSelectedValidation()):"copy"===e?ni.call(this):"cut"===e?ii.call(this):"paste"===e?si.call(this,"all"):"paste-value"===e?si.call(this,"text"):"paste-format"===e?si.call(this,"format"):"hide"===e?ri.call(this):xi.call(this,e)},te(window,"resize",(()=>{this.reload()})),te(window,"click",(e=>{this.focusing=t.contains(e.target)})),te(window,"paste",(e=>{si.call(this,"all",e),e.preventDefault()})),te(window,"keydown",(e=>{if(!this.focusing)return;if(this.isCommenting)return;const t=e.keyCode||e.which,{key:n,ctrlKey:i,shiftKey:s,metaKey:r}=e;if(i||r)switch(t){case 90:this.undo(),e.preventDefault();break;case 89:this.redo(),e.preventDefault();break;case 67:ni.call(this),e.preventDefault();break;case 88:ii.call(this),e.preventDefault();break;case 85:h.trigger("underline"),e.preventDefault();break;case 86:break;case 37:jn.call(this,s,"row-first"),e.preventDefault();break;case 38:jn.call(this,s,"col-first"),e.preventDefault();break;case 39:jn.call(this,s,"row-last"),e.preventDefault();break;case 40:jn.call(this,s,"col-last"),e.preventDefault();break;case 32:_n.call(this,!1,-1,this.data.selector.ci,!1),e.preventDefault();break;case 66:h.trigger("bold");break;case 73:h.trigger("italic")}else{switch(t){case 32:s&&_n.call(this,!1,this.data.selector.ri,-1,!1);break;case 27:a.hide(),ti.call(this);break;case 37:jn.call(this,s,"left"),e.preventDefault();break;case 38:jn.call(this,s,"up"),e.preventDefault();break;case 39:jn.call(this,s,"right"),e.preventDefault();break;case 40:jn.call(this,s,"down"),e.preventDefault();break;case 9:o.clear(),jn.call(this,!1,s?"left":"right"),e.preventDefault();break;case 13:o.clear(),jn.call(this,!1,s?"up":"down"),e.preventDefault();break;case 8:xi.call(this,"delete-cell-text"),e.preventDefault()}"Delete"===n?(xi.call(this,"delete-cell-text"),e.preventDefault()):t>=65&&t<=90||t>=48&&t<=57||t>=96&&t<=105||"="===e.key?(gi.call(this,e.key,"input"),ci.call(this),console.log("按键 进入编辑")):113===t&&ci.call(this)}}))}class Ci{constructor(e,t){this.eventMap=new Map;const{view:n,showToolbar:i,showContextmenu:s}=t.settings;this.el=a("div","x-spreadsheet-sheet"),this.toolbar=new Mn(t,n.width,!i),this.print=new zt(t),e.children(this.toolbar.el,this.el,this.print.el),this.data=t,this.tableEl=a("canvas","x-spreadsheet-table"),this.rowResizer=new le(!1,t.rows.height),this.colResizer=new le(!0,t.cols.minWidth),this.verticalScrollbar=new ae(!0),this.horizontalScrollbar=new ae(!1),this.editor=new Je(st,(()=>this.getTableOffset()),t.rows.height),this.modalValidation=new Rn,this.contextMenu=new Nt((()=>this.getRect()),!s),this.commentor=new Gn(t),this.selector=new ye(t),this.overlayerCEl=a("div","x-spreadsheet-overlayer-content").children(this.editor.el,this.selector.el,this.commentor.el),this.overlayerEl=a("div","x-spreadsheet-overlayer").child(this.overlayerCEl),this.sortFilter=new Yn,this.el.children(this.tableEl,this.overlayerEl.el,this.rowResizer.el,this.colResizer.el,this.verticalScrollbar.el,this.horizontalScrollbar.el,this.contextMenu.el,this.modalValidation.el,this.sortFilter.el),this.table=new class{constructor(e,t){this.el=e,this.draw=new Ze(e,t.viewWidth(),t.viewHeight()),this.data=t}resetData(e){this.data=e,this.render()}render(){const{data:e}=this,{rows:t,cols:n}=e,i=n.indexWidth,s=t.height;this.draw.resize(e.viewWidth(),e.viewHeight()),this.clear();const r=e.viewRange(),o=e.freezeTotalWidth(),l=e.freezeTotalHeight(),{x:a,y:h}=e.scroll;bt.call(this,r,i,s,o,l),ut.call(this,r,i,s,-a,-h),xt.call(this,"all",r,i,s,o,l),mt.call(this,i,s);const[A,c]=e.freeze;if(A>0||c>0){if(A>0){const e=r.clone();e.sri=0,e.eri=A-1,e.h=l,bt.call(this,e,i,s,o,0),ut.call(this,e,i,s,-a,0),xt.call(this,"top",e,i,s,o,0)}if(c>0){const e=r.clone();e.sci=0,e.eci=c-1,e.w=o,bt.call(this,e,i,s,0,l),xt.call(this,"left",e,i,s,0,l),ut.call(this,e,i,s,0,-h)}const t=e.freezeViewRange();bt.call(this,t,i,s,0,0),xt.call(this,"all",t,i,s,0,0),ut.call(this,t,i,s,0,0),Et.call(this,i,s,o,l)}}clear(){this.draw.clear()}}(this.tableEl.el,t),Ei.call(this),ei.call(this),_n.call(this,!1,0,0)}on(e,t){return this.eventMap.set(e,t),this}trigger(e,...t){const{eventMap:n}=this;n.has(e)&&n.get(e).call(this,...t)}resetData(e){this.editor.clear(),this.data=e,Zn.call(this),Xn.call(this),this.toolbar.resetData(e),this.print.resetData(e),this.selector.resetData(e),this.table.resetData(e)}loadData(e){return this.data.setData(e),ei.call(this),this}freeze(e,t){const{data:n}=this;return n.setFreeze(e,t),ei.call(this),this}undo(){this.data.undo(),ei.call(this)}redo(){this.data.redo(),ei.call(this)}reload(){return ei.call(this),this}getRect(){const{data:e}=this;return{width:e.viewWidth(),height:e.viewHeight()}}getTableOffset(){const{rows:e,cols:t}=this.data,{width:n,height:i}=this.getRect();return{width:n-t.indexWidth,height:i-e.height,left:t.indexWidth,top:e.height}}}class wi extends Rt{constructor(e){super(new Ie("ellipsis"),"auto",!1,"top-left"),this.contentClick=e}reset(e){const t=e.map(((e,t)=>a("div","x-spreadsheet-item").css("width","150px").css("font-weight","normal").on("click",(()=>{this.contentClick(t),this.hide()})).child(e)));this.setContentChildren(...t)}setTitle(){}}const vi=[{key:"delete",title:Y("contextmenu.deleteSheet")}];function yi(e){return a("div","x-spreadsheet-item").child(e.title()).on("click",(()=>{this.itemClick(e.key),this.hide()}))}function ki(){return vi.map((e=>yi.call(this,e)))}class Bi{constructor(){this.el=a("div","x-spreadsheet-contextmenu").css("width","160px").children(...ki.call(this)).hide(),this.itemClick=()=>{}}hide(){const{el:e}=this;e.hide(),ie(e)}setOffset(e){const{el:t}=this;t.offset(e),t.show(),se(t)}}class zi{constructor(e=(()=>{}),t=(()=>{}),n=(()=>{}),i=(()=>{})){this.swapFunc=t,this.updateFunc=i,this.dataNames=[],this.activeEl=null,this.deleteEl=null,this.items=[],this.moreEl=new wi((e=>{this.clickSwap2(this.items[e])})),this.contextMenu=new Bi,this.contextMenu.itemClick=n,this.el=a("div","x-spreadsheet-bottombar").children(this.contextMenu.el,this.menuEl=a("ul","x-spreadsheet-menu").child(a("li","").children(new Ie("add").on("click",(()=>{this.dataNames.length<10?e():Un("tip","it less than or equal to 10")})),a("span","").child(this.moreEl))))}addItem(e,t){this.dataNames.push(e);const n=a("li",t?"active":"").child(e);n.on("click",(()=>{this.clickSwap2(n)})).on("contextmenu",(e=>{const{offsetLeft:t,offsetHeight:i}=e.target;this.contextMenu.setOffset({left:t,bottom:i+1}),this.deleteEl=n})).on("dblclick",(()=>{const e=n.html(),t=new In("auto","");t.val(e),t.input.on("blur",(({target:t})=>{const{value:n}=t,i=this.dataNames.findIndex((t=>t===e));this.renameItem(i,n)})),n.html("").child(t.el),t.focus()})),t&&this.clickSwap(n),this.items.push(n),this.menuEl.child(n),this.moreEl.reset(this.dataNames)}renameItem(e,t){this.dataNames.splice(e,1,t),this.moreEl.reset(this.dataNames),this.items[e].html("").child(t),this.updateFunc(e,t)}clear(){this.items.forEach((e=>{this.menuEl.removeChild(e.el)})),this.items=[],this.dataNames=[],this.moreEl.reset(this.dataNames)}deleteItem(){const{activeEl:e,deleteEl:t}=this;if(this.items.length>1){const n=this.items.findIndex((e=>e===t));if(this.items.splice(n,1),this.dataNames.splice(n,1),this.menuEl.removeChild(t.el),this.moreEl.reset(this.dataNames),e===t){const[e]=this.items;return this.activeEl=e,this.activeEl.toggle(),[n,0]}return[n,-1]}return[-1]}clickSwap2(e){const t=this.items.findIndex((t=>t===e));this.clickSwap(e),this.activeEl.toggle(),this.swapFunc(t)}clickSwap(e){null!==this.activeEl&&this.activeEl.toggle(),this.activeEl=e}}class Si{constructor(e,t={}){let n=e;this.options=t,this.sheetIndex=1,this.datas=[],"string"==typeof e&&(n=document.querySelector(e)),this.bottombar=new zi((()=>{const e=this.addSheet();this.sheet.resetData(e)}),(e=>{const t=this.datas[e];this.sheet.resetData(t)}),(()=>{this.deleteSheet()}),((e,t)=>{this.datas[e].name=t})),this.data=this.addSheet();const i=a("div","x-spreadsheet").on("contextmenu",(e=>e.preventDefault()));n.appendChild(i.el),this.sheet=new Ci(i,this.data),i.child(this.bottombar.el)}addSheet(e,t=!0){const n=e||"sheet"+this.sheetIndex,i=new ee(n,this.options);return i.change=(...e)=>{this.sheet.trigger("change",...e)},this.datas.push(i),this.bottombar.addItem(n,t),this.sheetIndex+=1,i}deleteSheet(){const[e,t]=this.bottombar.deleteItem();e>=0&&(this.datas.splice(e,1),t>=0&&this.sheet.resetData(this.datas[t]))}loadData(e){const t=Array.isArray(e)?e:[e];if(this.bottombar.clear(),this.datas=[],t.length>0)for(let e=0;e<t.length;e+=1){const n=t[e],i=this.addSheet(n.name,0===e);i.setData(n),0===e&&this.sheet.resetData(i)}return this}getData(){return this.datas.map((e=>e.getData()))}cellText(e,t,n,i=0){return this.datas[i].setCellText(e,t,n,"finished"),this}cell(e,t,n=0){return this.datas[n].getCell(e,t)}cellStyle(e,t,n=0){return this.datas[n].getCellStyle(e,t)}reRender(){return this.sheet.table.render(),this}on(e,t){return this.sheet.on(e,t),this}validate(){const{validations:e}=this.data;return e.errors.size<=0}change(e){return this.sheet.on("change",e),this}static locale(e,t){U(e,t)}}window&&(window.x_spreadsheet=(e,t={})=>new Si(e,t),window.x_spreadsheet.locale=(e,t)=>U(e,t));const Mi=Si,Ii={name:"vue-x-spreadsheet",props:{options:Object,data:Array},created(){this.$slots},mounted(){this.$slots,Mi.locale(this.options.local||"zh-cn"),delete this.options.locale,this.x_spreadsheet=new Mi("#jman-x-spreadsheet",this.options).loadData(this.data),this.$emit("getInstance",this.x_spreadsheet)}};n(113);var Ni=function(e,t,n,i,s,r,o,l){var a,h="function"==typeof e?e.options:e;if(t&&(h.render=t,h.staticRenderFns=[],h._compiled=!0),h._scopeId="data-v-d0e03dde",a)if(h.functional){h._injectStyles=a;var A=h.render;h.render=function(e,t){return a.call(t),A(e,t)}}else{var c=h.beforeCreate;h.beforeCreate=c?[].concat(c,a):[a]}return{exports:e,options:h}}(Ii,i);Ni.options.__file="src/vueXSpreadsheet.vue";const Di=Ni.exports,Ti={install(e){e.component(Di.name,Di)}}}},t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}return n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(519)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,